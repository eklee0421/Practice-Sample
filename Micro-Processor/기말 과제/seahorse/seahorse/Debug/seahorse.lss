
seahorse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d0  00800100  000018d8  0000196c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049b  008007d0  008007d0  0000203c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e76  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2f  00000000  00000000  0000514e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000194e  00000000  00000000  00005f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  000078cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002661  00000000  00000000  00008886  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000aee7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c6       	rjmp	.+3256   	; 0xcf6 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	17 e0       	ldi	r17, 0x07	; 7
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ed       	ldi	r30, 0xD8	; 216
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3d       	cpi	r26, 0xD0	; 208
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2c e0       	ldi	r18, 0x0C	; 12
      b4:	a0 ed       	ldi	r26, 0xD0	; 208
      b6:	b7 e0       	ldi	r27, 0x07	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 36       	cpi	r26, 0x6B	; 107
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	13 d6       	rcall	.+3110   	; 0xcea <main>
      c4:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <timer_init>:
}
void ADC_init(void){
	ADCSRA = 0x00;  //disable adc
	ADMUX = 0x00;   //select adc input 0
	ACSR = 0x80;	  //1000 0000
	ADCSRA = 0xC3;  //1100 0011
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	88 60       	ori	r24, 0x08	; 8
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	83 b7       	in	r24, 0x33	; 51
      d2:	84 60       	ori	r24, 0x04	; 4
      d4:	83 bf       	out	0x33, r24	; 51
      d6:	12 be       	out	0x32, r1	; 50
      d8:	89 ef       	ldi	r24, 0xF9	; 249
      da:	81 bf       	out	0x31, r24	; 49
      dc:	87 b7       	in	r24, 0x37	; 55
      de:	82 60       	ori	r24, 0x02	; 2
      e0:	87 bf       	out	0x37, r24	; 55
      e2:	08 95       	ret

000000e4 <Port_init>:
      e4:	1b ba       	out	0x1b, r1	; 27
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	8a bb       	out	0x1a, r24	; 26
      ea:	9e ef       	ldi	r25, 0xFE	; 254
      ec:	98 bb       	out	0x18, r25	; 24
      ee:	97 bb       	out	0x17, r25	; 23
      f0:	15 ba       	out	0x15, r1	; 21
      f2:	90 ef       	ldi	r25, 0xF0	; 240
      f4:	94 bb       	out	0x14, r25	; 20
      f6:	91 e8       	ldi	r25, 0x81	; 129
      f8:	92 bb       	out	0x12, r25	; 18
      fa:	90 e8       	ldi	r25, 0x80	; 128
      fc:	91 bb       	out	0x11, r25	; 17
      fe:	13 b8       	out	0x03, r1	; 3
     100:	82 b9       	out	0x02, r24	; 2
     102:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     106:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     10a:	08 95       	ret

0000010c <init_devices>:
}
void init_devices(void)
{
	cli();
     10c:	f8 94       	cli
	timer_init();
     10e:	dd df       	rcall	.-70     	; 0xca <timer_init>
	Port_init();
     110:	e9 df       	rcall	.-46     	; 0xe4 <Port_init>
	lcd_init();
     112:	90 d7       	rcall	.+3872   	; 0x1034 <lcd_init>
     114:	98 d6       	rcall	.+3376   	; 0xe46 <Adc_init>
	Adc_init();
     116:	78 94       	sei
     118:	08 95       	ret

0000011a <printSeaHorse>:
	sei();
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11

/**************************************************
 ************* Peripheral Functions ***************
 **************************************************/

void printSeaHorse(void){
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	0f 2e       	mov	r0, r31
     130:	fc ed       	ldi	r31, 0xDC	; 220
     132:	af 2e       	mov	r10, r31
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	bf 2e       	mov	r11, r31
     138:	f0 2d       	mov	r31, r0
     13a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int y = 0; y < 16; y++){
		for(int x = 0; x < 30; x++){
			if(seaHorse[x][y] == 1){
				GLCD_Dot(x + hitbox_x, y + hitbox_y);
     13c:	0f 2e       	mov	r0, r31
     13e:	ff e5       	ldi	r31, 0x5F	; 95
     140:	cf 2e       	mov	r12, r31
     142:	f8 e0       	ldi	r31, 0x08	; 8
     144:	df 2e       	mov	r13, r31
     146:	f0 2d       	mov	r31, r0
     148:	0f 2e       	mov	r0, r31
     14a:	f1 e6       	ldi	r31, 0x61	; 97
     14c:	ef 2e       	mov	r14, r31
     14e:	f8 e0       	ldi	r31, 0x08	; 8
     150:	ff 2e       	mov	r15, r31
     152:	f0 2d       	mov	r31, r0
     154:	16 c0       	rjmp	.+44     	; 0x182 <printSeaHorse+0x68>
 **************************************************/

void printSeaHorse(void){
	for(int y = 0; y < 16; y++){
		for(int x = 0; x < 30; x++){
			if(seaHorse[x][y] == 1){
     156:	f8 01       	movw	r30, r16
     158:	80 81       	ld	r24, Z
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	39 f4       	brne	.+14     	; 0x16c <printSeaHorse+0x52>
				GLCD_Dot(x + hitbox_x, y + hitbox_y);
     15e:	f6 01       	movw	r30, r12
     160:	60 81       	ld	r22, Z
     162:	6d 0f       	add	r22, r29
     164:	f7 01       	movw	r30, r14
     166:	80 81       	ld	r24, Z
     168:	8c 0f       	add	r24, r28
     16a:	dc d7       	rcall	.+4024   	; 0x1124 <GLCD_Dot>
     16c:	00 5f       	subi	r16, 0xF0	; 240
     16e:	1f 4f       	sbci	r17, 0xFF	; 255
     170:	cf 5f       	subi	r28, 0xFF	; 255
 ************* Peripheral Functions ***************
 **************************************************/

void printSeaHorse(void){
	for(int y = 0; y < 16; y++){
		for(int x = 0; x < 30; x++){
     172:	ce 31       	cpi	r28, 0x1E	; 30
     174:	81 f7       	brne	.-32     	; 0x156 <printSeaHorse+0x3c>
     176:	df 5f       	subi	r29, 0xFF	; 255
     178:	ff ef       	ldi	r31, 0xFF	; 255
     17a:	af 1a       	sub	r10, r31
     17c:	bf 0a       	sbc	r11, r31
/**************************************************
 ************* Peripheral Functions ***************
 **************************************************/

void printSeaHorse(void){
	for(int y = 0; y < 16; y++){
     17e:	d0 31       	cpi	r29, 0x10	; 16
     180:	19 f0       	breq	.+6      	; 0x188 <printSeaHorse+0x6e>

/**************************************************
 ************* Peripheral Functions ***************
 **************************************************/

void printSeaHorse(void){
     182:	85 01       	movw	r16, r10
     184:	c0 e0       	ldi	r28, 0x00	; 0
     186:	e7 cf       	rjmp	.-50     	; 0x156 <printSeaHorse+0x3c>
			if(seaHorse[x][y] == 1){
				GLCD_Dot(x + hitbox_x, y + hitbox_y);
			} else continue;
		}
	}	
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	ff 90       	pop	r15
     192:	ef 90       	pop	r14
     194:	df 90       	pop	r13
     196:	cf 90       	pop	r12
     198:	bf 90       	pop	r11
     19a:	af 90       	pop	r10
     19c:	08 95       	ret

0000019e <print_scratch>:


void print_scratch(void){
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
	hit++;
     1b0:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <hit>
     1b4:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <hit+0x1>
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <hit+0x1>
     1be:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <hit>
	int x_n = rand() % 55;
     1c2:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
     1c6:	67 e3       	ldi	r22, 0x37	; 55
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     1ce:	e8 2e       	mov	r14, r24
	int y_n = rand() % 115;
     1d0:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
     1d4:	63 e7       	ldi	r22, 0x73	; 115
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     1dc:	f8 2e       	mov	r15, r24
     1de:	0f 2e       	mov	r0, r31
     1e0:	f4 e0       	ldi	r31, 0x04	; 4
     1e2:	cf 2e       	mov	r12, r31
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	df 2e       	mov	r13, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f6 e0       	ldi	r31, 0x06	; 6
     1ee:	bf 2e       	mov	r11, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	b8 0e       	add	r11, r24
     1f4:	d6 e0       	ldi	r29, 0x06	; 6
     1f6:	de 0d       	add	r29, r14
     1f8:	12 c0       	rjmp	.+36     	; 0x21e <print_scratch+0x80>
	for(int y = 0; y < 6; y++){
		for(int x = 0; x < 6; x++){
			if(scratch[x][y] == 1){
     1fa:	f8 01       	movw	r30, r16
     1fc:	90 81       	ld	r25, Z
     1fe:	91 30       	cpi	r25, 0x01	; 1
     200:	19 f4       	brne	.+6      	; 0x208 <print_scratch+0x6a>
				GLCD_Dot(x + x_n, y + y_n);
     202:	6f 2d       	mov	r22, r15
     204:	8c 2f       	mov	r24, r28
     206:	8e d7       	rcall	.+3868   	; 0x1124 <GLCD_Dot>
     208:	0a 5f       	subi	r16, 0xFA	; 250
     20a:	1f 4f       	sbci	r17, 0xFF	; 255
     20c:	cf 5f       	subi	r28, 0xFF	; 255
void print_scratch(void){
	hit++;
	int x_n = rand() % 55;
	int y_n = rand() % 115;
	for(int y = 0; y < 6; y++){
		for(int x = 0; x < 6; x++){
     20e:	cd 13       	cpse	r28, r29
     210:	f4 cf       	rjmp	.-24     	; 0x1fa <print_scratch+0x5c>
     212:	f3 94       	inc	r15
     214:	ff ef       	ldi	r31, 0xFF	; 255
     216:	cf 1a       	sub	r12, r31
     218:	df 0a       	sbc	r13, r31

void print_scratch(void){
	hit++;
	int x_n = rand() % 55;
	int y_n = rand() % 115;
	for(int y = 0; y < 6; y++){
     21a:	fb 14       	cp	r15, r11
     21c:	19 f0       	breq	.+6      	; 0x224 <print_scratch+0x86>
     21e:	ce 2d       	mov	r28, r14
		}
	}	
}


void print_scratch(void){
     220:	86 01       	movw	r16, r12
     222:	eb cf       	rjmp	.-42     	; 0x1fa <print_scratch+0x5c>
			if(scratch[x][y] == 1){
				GLCD_Dot(x + x_n, y + y_n);
			} else continue;
		}
	}	
}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	bf 90       	pop	r11
     236:	08 95       	ret

00000238 <printFishingRod>:
		ScreenBuffer_clear();
	}
	air_run = 0;
}

void printFishingRod(void) {
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	0f 2e       	mov	r0, r31
     246:	f8 e2       	ldi	r31, 0x28	; 40
     248:	ef 2e       	mov	r14, r31
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	ff 2e       	mov	r15, r31
     24e:	f0 2d       	mov	r31, r0
     250:	dd e3       	ldi	r29, 0x3D	; 61
     252:	12 c0       	rjmp	.+36     	; 0x278 <printFishingRod+0x40>
	for(int y = 0; y < 6; y++) {
		for(int x = 0; x < 30; x++) {
			if(fishingRod[x][y] == 1) {
     254:	f8 01       	movw	r30, r16
     256:	80 81       	ld	r24, Z
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	19 f4       	brne	.+6      	; 0x262 <printFishingRod+0x2a>
				GLCD_Dot(x, y + 61);
     25c:	6d 2f       	mov	r22, r29
     25e:	8c 2f       	mov	r24, r28
     260:	61 d7       	rcall	.+3778   	; 0x1124 <GLCD_Dot>
     262:	0a 5f       	subi	r16, 0xFA	; 250
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	cf 5f       	subi	r28, 0xFF	; 255
	air_run = 0;
}

void printFishingRod(void) {
	for(int y = 0; y < 6; y++) {
		for(int x = 0; x < 30; x++) {
     268:	ce 31       	cpi	r28, 0x1E	; 30
     26a:	a1 f7       	brne	.-24     	; 0x254 <printFishingRod+0x1c>
     26c:	df 5f       	subi	r29, 0xFF	; 255
     26e:	ff ef       	ldi	r31, 0xFF	; 255
     270:	ef 1a       	sub	r14, r31
     272:	ff 0a       	sbc	r15, r31
	}
	air_run = 0;
}

void printFishingRod(void) {
	for(int y = 0; y < 6; y++) {
     274:	d3 34       	cpi	r29, 0x43	; 67
     276:	19 f0       	breq	.+6      	; 0x27e <printFishingRod+0x46>
		ScreenBuffer_clear();
	}
	air_run = 0;
}

void printFishingRod(void) {
     278:	87 01       	movw	r16, r14
     27a:	c0 e0       	ldi	r28, 0x00	; 0
     27c:	eb cf       	rjmp	.-42     	; 0x254 <printFishingRod+0x1c>
				GLCD_Dot(x, y + 61);
			} else continue;
		}
	}
	//lcd_string(10, 0 , "Let's escape on the fishing rod!");
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	08 95       	ret

0000028c <setFeed>:

void setFeed(void){		//먹이를 출력하는 함수
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
	if(num_feed < 20){
     298:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <num_feed>
     29c:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <num_feed+0x1>
     2a0:	44 97       	sbiw	r24, 0x14	; 20
     2a2:	7c f5       	brge	.+94     	; 0x302 <setFeed+0x76>
		int x1 = rand() % 59 +1;
     2a4:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
     2a8:	7c 01       	movw	r14, r24
		int y1 = rand() % 121 + 1;
     2aa:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
     2ae:	ec 01       	movw	r28, r24
		x_feed[num_feed] = x1;
     2b0:	20 91 f6 07 	lds	r18, 0x07F6	; 0x8007f6 <num_feed>
     2b4:	30 91 f7 07 	lds	r19, 0x07F7	; 0x8007f7 <num_feed+0x1>
     2b8:	f9 01       	movw	r30, r18
     2ba:	ee 0f       	add	r30, r30
     2bc:	ff 1f       	adc	r31, r31
     2be:	8f 01       	movw	r16, r30
     2c0:	00 5e       	subi	r16, 0xE0	; 224
     2c2:	17 4f       	sbci	r17, 0xF7	; 247
     2c4:	c7 01       	movw	r24, r14
     2c6:	6b e3       	ldi	r22, 0x3B	; 59
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	d8 01       	movw	r26, r16
     2d2:	8d 93       	st	X+, r24
     2d4:	9c 93       	st	X, r25
		y_feed[num_feed] = y1;
     2d6:	e8 50       	subi	r30, 0x08	; 8
     2d8:	f8 4f       	sbci	r31, 0xF8	; 248
     2da:	ce 01       	movw	r24, r28
     2dc:	69 e7       	ldi	r22, 0x79	; 121
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	80 83       	st	Z, r24
		feed_flag[num_feed]++;
     2ea:	f9 01       	movw	r30, r18
     2ec:	ee 51       	subi	r30, 0x1E	; 30
     2ee:	f8 4f       	sbci	r31, 0xF8	; 248
     2f0:	80 81       	ld	r24, Z
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	80 83       	st	Z, r24
		num_feed++;	
     2f6:	2f 5f       	subi	r18, 0xFF	; 255
     2f8:	3f 4f       	sbci	r19, 0xFF	; 255
     2fa:	30 93 f7 07 	sts	0x07F7, r19	; 0x8007f7 <num_feed+0x1>
     2fe:	20 93 f6 07 	sts	0x07F6, r18	; 0x8007f6 <num_feed>
	}
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <printFeed>:

void printFeed(int x1, int y1){
	GLCD_Rectangle_black(x1, y1, x1+4, y1+4);
     310:	24 e0       	ldi	r18, 0x04	; 4
     312:	26 0f       	add	r18, r22
     314:	44 e0       	ldi	r20, 0x04	; 4
     316:	48 0f       	add	r20, r24
     318:	79 c7       	rjmp	.+3826   	; 0x120c <GLCD_Rectangle_black>
     31a:	08 95       	ret

0000031c <move_seahorse>:
}

void move_seahorse(void) {
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
	short Voltage1 = 0, Voltage2 = 0;
	Data_ADC3 = Read_Adc_Data(3) / 14;
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	94 d5       	rcall	.+2856   	; 0xe54 <Read_Adc_Data>
     32c:	9c 01       	movw	r18, r24
     32e:	36 95       	lsr	r19
     330:	27 95       	ror	r18
     332:	a5 e2       	ldi	r26, 0x25	; 37
     334:	b9 e4       	ldi	r27, 0x49	; 73
     336:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__umulhisi3>
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	90 93 66 08 	sts	0x0866, r25	; 0x800866 <Data_ADC3+0x1>
     342:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <Data_ADC3>
	Data_ADC4 = Read_Adc_Data(4) / 8;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	85 d5       	rcall	.+2826   	; 0xe54 <Read_Adc_Data>
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	96 95       	lsr	r25
     354:	87 95       	ror	r24
     356:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <Data_ADC4+0x1>
     35a:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <Data_ADC4>
	
	//좌(<--) 조작
	if(Data_ADC3 > 50) {
     35e:	20 91 65 08 	lds	r18, 0x0865	; 0x800865 <Data_ADC3>
     362:	30 91 66 08 	lds	r19, 0x0866	; 0x800866 <Data_ADC3+0x1>
     366:	23 33       	cpi	r18, 0x33	; 51
     368:	31 05       	cpc	r19, r1
     36a:	78 f1       	brcs	.+94     	; 0x3ca <move_seahorse+0xae>
		if(hitbox_y > 0) {
     36c:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <hitbox_y>
     370:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <hitbox_y+0x1>
     374:	18 16       	cp	r1, r24
     376:	19 06       	cpc	r1, r25
     378:	cc f4       	brge	.+50     	; 0x3ac <move_seahorse+0x90>
			hitbox_y--;
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <hitbox_y+0x1>
     380:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <hitbox_y>
			if(!direction[0]){
     384:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <direction>
     388:	81 11       	cpse	r24, r1
     38a:	10 c0       	rjmp	.+32     	; 0x3ac <move_seahorse+0x90>
				direction[0] = 1;
     38c:	e8 e4       	ldi	r30, 0x48	; 72
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 83       	st	Z, r24
				direction[1] = 0;
     394:	11 82       	std	Z+1, r1	; 0x01
				direction[2] = 0;
     396:	12 82       	std	Z+2, r1	; 0x02
				direction[3] = 0;
     398:	13 82       	std	Z+3, r1	; 0x03
				run++;
     39a:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <run>
     39e:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <run+0x1>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <run+0x1>
     3a8:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <run>
			}
		}
		if (hitbox_y == 0){
     3ac:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <hitbox_y>
     3b0:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <hitbox_y+0x1>
     3b4:	89 2b       	or	r24, r25
     3b6:	09 f0       	breq	.+2      	; 0x3ba <move_seahorse+0x9e>
     3b8:	9b c0       	rjmp	.+310    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			if(!death[1]) {
     3ba:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <death+0x1>
     3be:	81 11       	cpse	r24, r1
     3c0:	97 c0       	rjmp	.+302    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				death_reason = 1;	
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     3c8:	93 c0       	rjmp	.+294    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			}
		}
	}
	//우(-->) 조작
	else if(Data_ADC3 < 20) {
     3ca:	24 31       	cpi	r18, 0x14	; 20
     3cc:	31 05       	cpc	r19, r1
     3ce:	80 f5       	brcc	.+96     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		if(hitbox_y < 112) {
     3d0:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <hitbox_y>
     3d4:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <hitbox_y+0x1>
     3d8:	80 37       	cpi	r24, 0x70	; 112
     3da:	91 05       	cpc	r25, r1
     3dc:	cc f4       	brge	.+50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			hitbox_y++;
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <hitbox_y+0x1>
     3e4:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <hitbox_y>
			if(!direction[1]){
     3e8:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <direction+0x1>
     3ec:	81 11       	cpse	r24, r1
     3ee:	10 c0       	rjmp	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				direction[0] = 0;
     3f0:	e8 e4       	ldi	r30, 0x48	; 72
     3f2:	f8 e0       	ldi	r31, 0x08	; 8
     3f4:	10 82       	st	Z, r1
				direction[1] = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	81 83       	std	Z+1, r24	; 0x01
				direction[2] = 0;
     3fa:	12 82       	std	Z+2, r1	; 0x02
				direction[3] = 0;
     3fc:	13 82       	std	Z+3, r1	; 0x03
				run++;
     3fe:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <run>
     402:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <run+0x1>
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <run+0x1>
     40c:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <run>
			}
		}
		if (hitbox_y == 112){
     410:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <hitbox_y>
     414:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <hitbox_y+0x1>
     418:	80 37       	cpi	r24, 0x70	; 112
     41a:	91 05       	cpc	r25, r1
     41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	68 c0       	rjmp	.+208    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			if(!death[1]) {
     420:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <death+0x1>
     424:	81 11       	cpse	r24, r1
     426:	64 c0       	rjmp	.+200    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				death_reason = 1;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     42e:	60 c0       	rjmp	.+192    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			}
		}
	}
	//하(--v) 조작
	else if(Data_ADC4 > 90) {
     430:	8b 35       	cpi	r24, 0x5B	; 91
     432:	91 05       	cpc	r25, r1
     434:	70 f1       	brcs	.+92     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		if(hitbox_x < 34) {
     436:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <hitbox_x>
     43a:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <hitbox_x+0x1>
     43e:	82 32       	cpi	r24, 0x22	; 34
     440:	91 05       	cpc	r25, r1
     442:	cc f4       	brge	.+50     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			hitbox_x++;
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <hitbox_x+0x1>
     44a:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <hitbox_x>
			if(!direction[2]){
     44e:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <direction+0x2>
     452:	81 11       	cpse	r24, r1
     454:	10 c0       	rjmp	.+32     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				direction[0] = 0;
     456:	e8 e4       	ldi	r30, 0x48	; 72
     458:	f8 e0       	ldi	r31, 0x08	; 8
     45a:	10 82       	st	Z, r1
				direction[1] = 0;
     45c:	11 82       	std	Z+1, r1	; 0x01
				direction[2] = 1;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	82 83       	std	Z+2, r24	; 0x02
				direction[3] = 0;
     462:	13 82       	std	Z+3, r1	; 0x03
				run++;
     464:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <run>
     468:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <run+0x1>
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <run+0x1>
     472:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <run>
			}
		}
		if (hitbox_x == 34){
     476:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <hitbox_x>
     47a:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <hitbox_x+0x1>
     47e:	82 97       	sbiw	r24, 0x22	; 34
     480:	b9 f5       	brne	.+110    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			if(!death[1]) {
     482:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <death+0x1>
     486:	81 11       	cpse	r24, r1
     488:	33 c0       	rjmp	.+102    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				death_reason = 1;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     490:	2f c0       	rjmp	.+94     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			}
		}
	}
	//상(--^) 조작
	else if(Data_ADC4 < 20) {
     492:	44 97       	sbiw	r24, 0x14	; 20
     494:	68 f5       	brcc	.+90     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		if(hitbox_x > 0) {
     496:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <hitbox_x>
     49a:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <hitbox_x+0x1>
     49e:	18 16       	cp	r1, r24
     4a0:	19 06       	cpc	r1, r25
     4a2:	cc f4       	brge	.+50     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			hitbox_x--;
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <hitbox_x+0x1>
     4aa:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <hitbox_x>
			if(!direction[3]){
     4ae:	80 91 4b 08 	lds	r24, 0x084B	; 0x80084b <direction+0x3>
     4b2:	81 11       	cpse	r24, r1
     4b4:	10 c0       	rjmp	.+32     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				direction[0] = 0;
     4b6:	e8 e4       	ldi	r30, 0x48	; 72
     4b8:	f8 e0       	ldi	r31, 0x08	; 8
     4ba:	10 82       	st	Z, r1
				direction[1] = 0;
     4bc:	11 82       	std	Z+1, r1	; 0x01
				direction[2] = 0;
     4be:	12 82       	std	Z+2, r1	; 0x02
				direction[3] = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	83 83       	std	Z+3, r24	; 0x03
				run++;
     4c4:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <run>
     4c8:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <run+0x1>
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <run+0x1>
     4d2:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <run>
			}
		}
		if (hitbox_x == 0){
     4d6:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <hitbox_x>
     4da:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <hitbox_x+0x1>
     4de:	89 2b       	or	r24, r25
     4e0:	39 f4       	brne	.+14     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			if(!death[1]) {
     4e2:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <death+0x1>
     4e6:	81 11       	cpse	r24, r1
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				death_reason = 1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
			}
		}
	}

	lcd_clear();
	ScreenBuffer_clear();
     4f0:	8f d5       	rcall	.+2846   	; 0x1010 <lcd_clear>
     4f2:	7a d6       	rcall	.+3316   	; 0x11e8 <ScreenBuffer_clear>
	printSeaHorse();
     4f4:	12 de       	rcall	.-988    	; 0x11a <printSeaHorse>
	
	if(chance_flag) {
     4f6:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <chance_flag>
     4fa:	88 23       	and	r24, r24
     4fc:	c9 f0       	breq	.+50     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		printFishingRod();
     4fe:	9c de       	rcall	.-712    	; 0x238 <printFishingRod>
     500:	17 c0       	rjmp	.+46     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     502:	fe 01       	movw	r30, r28
	}
	
	for(int i =0; i< 20 ; i++){
		if(feed_flag[i]){
     504:	ee 51       	subi	r30, 0x1E	; 30
     506:	f8 4f       	sbci	r31, 0xF8	; 248
     508:	80 81       	ld	r24, Z
     50a:	88 23       	and	r24, r24
     50c:	39 f0       	breq	.+14     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     50e:	f7 01       	movw	r30, r14
			printFeed(x_feed[i], y_feed[i]);
     510:	60 81       	ld	r22, Z
     512:	71 81       	ldd	r23, Z+1	; 0x01
     514:	f8 01       	movw	r30, r16
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	fa de       	rcall	.-524    	; 0x310 <printFeed>
     51c:	21 96       	adiw	r28, 0x01	; 1
	
	if(chance_flag) {
		printFishingRod();
	}
	
	for(int i =0; i< 20 ; i++){
     51e:	f2 e0       	ldi	r31, 0x02	; 2
     520:	ef 0e       	add	r14, r31
     522:	f1 1c       	adc	r15, r1
     524:	0e 5f       	subi	r16, 0xFE	; 254
     526:	1f 4f       	sbci	r17, 0xFF	; 255
     528:	c4 31       	cpi	r28, 0x14	; 20
     52a:	d1 05       	cpc	r29, r1
     52c:	51 f7       	brne	.-44     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     52e:	0b c0       	rjmp	.+22     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     530:	0f 2e       	mov	r0, r31
     532:	f8 ef       	ldi	r31, 0xF8	; 248
     534:	ef 2e       	mov	r14, r31
     536:	f7 e0       	ldi	r31, 0x07	; 7
     538:	ff 2e       	mov	r15, r31
     53a:	f0 2d       	mov	r31, r0
     53c:	00 e2       	ldi	r16, 0x20	; 32
     53e:	18 e0       	ldi	r17, 0x08	; 8
     540:	c0 e0       	ldi	r28, 0x00	; 0

void printFeed(int x1, int y1){
	GLCD_Rectangle_black(x1, y1, x1+4, y1+4);
}

void move_seahorse(void) {
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	de cf       	rjmp	.-68     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     546:	df 91       	pop	r29
	for(int i =0; i< 20 ; i++){
		if(feed_flag[i]){
			printFeed(x_feed[i], y_feed[i]);
		}
	}
}
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	08 95       	ret

00000554 <printAir>:
     554:	0f 93       	push	r16
			} else continue;
		}
	}	
}

void printAir(){
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	num_air++;
     55c:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <num_air>
     560:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <num_air+0x1>
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <num_air+0x1>
     56a:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <num_air>
	int y = rand() % 100 + 10;
     56e:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
     572:	64 e6       	ldi	r22, 0x64	; 100
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     57a:	8c 01       	movw	r16, r24
     57c:	06 5f       	subi	r16, 0xF6	; 246
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	cc e3       	ldi	r28, 0x3C	; 60
	int x = 60 ;
	for(x = 60; x > 0; x--){
		air_run = 1;
     582:	d1 e0       	ldi	r29, 0x01	; 1
     584:	d0 93 d4 07 	sts	0x07D4, r29	; 0x8007d4 <air_run>
		GLCD_Circle_black(x,y,3);
     588:	43 e0       	ldi	r20, 0x03	; 3
     58a:	60 2f       	mov	r22, r16
     58c:	8c 2f       	mov	r24, r28
     58e:	6c d6       	rcall	.+3288   	; 0x1268 <GLCD_Circle_black>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     590:	2f e5       	ldi	r18, 0x5F	; 95
     592:	8a ee       	ldi	r24, 0xEA	; 234
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	21 50       	subi	r18, 0x01	; 1
     598:	80 40       	sbci	r24, 0x00	; 0
     59a:	90 40       	sbci	r25, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <printAir+0x42>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <printAir+0x4c>
		_delay_ms(300);
		move_seahorse();
     5a0:	00 00       	nop
     5a2:	bc de       	rcall	.-648    	; 0x31c <move_seahorse>
     5a4:	87 ea       	ldi	r24, 0xA7	; 167
     5a6:	91 e6       	ldi	r25, 0x61	; 97
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <printAir+0x54>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <printAir+0x5a>
		_delay_ms(100);
		lcd_clear();
     5ae:	00 00       	nop
     5b0:	2f d5       	rcall	.+2654   	; 0x1010 <lcd_clear>
		ScreenBuffer_clear();
     5b2:	1a d6       	rcall	.+3124   	; 0x11e8 <ScreenBuffer_clear>
     5b4:	c1 50       	subi	r28, 0x01	; 1
     5b6:	31 f7       	brne	.-52     	; 0x584 <printAir+0x30>

void printAir(){
	num_air++;
	int y = rand() % 100 + 10;
	int x = 60 ;
	for(x = 60; x > 0; x--){
     5b8:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <air_run>
		move_seahorse();
		_delay_ms(100);
		lcd_clear();
		ScreenBuffer_clear();
	}
	air_run = 0;
     5bc:	df 91       	pop	r29
}
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <fishing_rod_event>:
     5c6:	38 de       	rcall	.-912    	; 0x238 <printFishingRod>
	}
}

void fishing_rod_event(void) {
	printFishingRod();
	if((hitbox_y >= 61 && hitbox_y <= 67) && (hitbox_x >= 0 && hitbox_x <= 30)) {
     5c8:	80 91 5f 08 	lds	r24, 0x085F	; 0x80085f <hitbox_y>
     5cc:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <hitbox_y+0x1>
     5d0:	cd 97       	sbiw	r24, 0x3d	; 61
     5d2:	07 97       	sbiw	r24, 0x07	; 7
     5d4:	58 f4       	brcc	.+22     	; 0x5ec <fishing_rod_event+0x26>
     5d6:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <hitbox_x>
     5da:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <hitbox_x+0x1>
     5de:	4f 97       	sbiw	r24, 0x1f	; 31
     5e0:	28 f4       	brcc	.+10     	; 0x5ec <fishing_rod_event+0x26>
		while(1) {
			if((PIND & 0x01) == 0) {
     5e2:	80 99       	sbic	0x10, 0	; 16
     5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <fishing_rod_event+0x1c>
				death_reason = 9;
     5e6:	89 e0       	ldi	r24, 0x09	; 9
     5e8:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     5ec:	08 95       	ret

000005ee <eat_feed>:
		}
		
	}
}

void eat_feed(void){
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
			num_feed--;
     5fa:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <num_feed>
     5fe:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <num_feed+0x1>
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <num_feed+0x1>
     608:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <num_feed>
			eat++;
     60c:	20 91 e0 07 	lds	r18, 0x07E0	; 0x8007e0 <eat>
     610:	30 91 e1 07 	lds	r19, 0x07E1	; 0x8007e1 <eat+0x1>
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	30 93 e1 07 	sts	0x07E1, r19	; 0x8007e1 <eat+0x1>
     61c:	20 93 e0 07 	sts	0x07E0, r18	; 0x8007e0 <eat>
			x_feed[num_feed] = 0;
     620:	9c 01       	movw	r18, r24
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	f9 01       	movw	r30, r18
     628:	e0 5e       	subi	r30, 0xE0	; 224
     62a:	f7 4f       	sbci	r31, 0xF7	; 247
     62c:	11 82       	std	Z+1, r1	; 0x01
     62e:	10 82       	st	Z, r1
			y_feed[num_feed] = 0;
     630:	f9 01       	movw	r30, r18
     632:	e8 50       	subi	r30, 0x08	; 8
     634:	f8 4f       	sbci	r31, 0xF8	; 248
     636:	11 82       	std	Z+1, r1	; 0x01
     638:	10 82       	st	Z, r1
			feed_flag[num_feed] = 0;
     63a:	fc 01       	movw	r30, r24
     63c:	ee 51       	subi	r30, 0x1E	; 30
     63e:	f8 4f       	sbci	r31, 0xF8	; 248
     640:	10 82       	st	Z, r1
			lcd_clear();
     642:	e6 d4       	rcall	.+2508   	; 0x1010 <lcd_clear>
			ScreenBuffer_clear();
     644:	d1 d5       	rcall	.+2978   	; 0x11e8 <ScreenBuffer_clear>
     646:	c8 ef       	ldi	r28, 0xF8	; 248
     648:	d7 e0       	ldi	r29, 0x07	; 7
     64a:	00 e2       	ldi	r16, 0x20	; 32
     64c:	18 e0       	ldi	r17, 0x08	; 8
     64e:	0f 2e       	mov	r0, r31
     650:	f0 e2       	ldi	r31, 0x20	; 32
     652:	ef 2e       	mov	r14, r31
     654:	f8 e0       	ldi	r31, 0x08	; 8
     656:	ff 2e       	mov	r15, r31
     658:	f0 2d       	mov	r31, r0
     65a:	69 91       	ld	r22, Y+
			for(int j =0; j<20;j++){
				printFeed(x_feed[j],y_feed[j]);
     65c:	79 91       	ld	r23, Y+
     65e:	f8 01       	movw	r30, r16
     660:	81 91       	ld	r24, Z+
     662:	91 91       	ld	r25, Z+
     664:	8f 01       	movw	r16, r30
     666:	54 de       	rcall	.-856    	; 0x310 <printFeed>
     668:	ce 15       	cp	r28, r14
			x_feed[num_feed] = 0;
			y_feed[num_feed] = 0;
			feed_flag[num_feed] = 0;
			lcd_clear();
			ScreenBuffer_clear();
			for(int j =0; j<20;j++){
     66a:	df 05       	cpc	r29, r15
     66c:	b1 f7       	brne	.-20     	; 0x65a <eat_feed+0x6c>
     66e:	0e 94 0e 0c 	call	0x181c	; 0x181c <rand>
				printFeed(x_feed[j],y_feed[j]);
			}
			int i = rand() % 10;
     672:	6a e0       	ldi	r22, 0x0A	; 10
			if(i == 0){
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     67a:	89 2b       	or	r24, r25
     67c:	39 f4       	brne	.+14     	; 0x68c <eat_feed+0x9e>
     67e:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <death+0x7>
				if(!death[7]){
     682:	81 11       	cpse	r24, r1
     684:	03 c0       	rjmp	.+6      	; 0x68c <eat_feed+0x9e>
     686:	87 e0       	ldi	r24, 0x07	; 7
					death_reason = 7;
     688:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     68c:	df 91       	pop	r29
				}
			}
}
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <Phase_1>:
     69a:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <hitbox_x+0x1>
/**************************************************
 *************** Phase Functions ******************
 **************************************************/

void Phase_1(void) {					// Start Main Menu
	hitbox_x = 0;
     69e:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <hitbox_x>
	hitbox_y = 0;
     6a2:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <hitbox_y+0x1>
     6a6:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <hitbox_y>
	Data_ADC0 = Read_Adc_Data(0) / 10;  //0번 아날로그 포트 읽기
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	d3 d3       	rcall	.+1958   	; 0xe54 <Read_Adc_Data>
     6ae:	9c 01       	movw	r18, r24
     6b0:	ad ec       	ldi	r26, 0xCD	; 205
     6b2:	bc ec       	ldi	r27, 0xCC	; 204
     6b4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__umulhisi3>
     6b8:	96 95       	lsr	r25
     6ba:	87 95       	ror	r24
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	96 95       	lsr	r25
     6c2:	87 95       	ror	r24
     6c4:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <__data_end+0x1>
     6c8:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__data_end>
     6cc:	2f e3       	ldi	r18, 0x3F	; 63
     6ce:	82 e4       	ldi	r24, 0x42	; 66
     6d0:	9f e0       	ldi	r25, 0x0F	; 15
     6d2:	21 50       	subi	r18, 0x01	; 1
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	90 40       	sbci	r25, 0x00	; 0
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <Phase_1+0x38>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <Phase_1+0x42>
	_delay_ms(5000);
	lcd_clear();
     6dc:	00 00       	nop
	ScreenBuffer_clear();
     6de:	98 d4       	rcall	.+2352   	; 0x1010 <lcd_clear>
     6e0:	83 d5       	rcall	.+2822   	; 0x11e8 <ScreenBuffer_clear>
	lcd_string(0, 0, "     ==============");
     6e2:	47 e9       	ldi	r20, 0x97	; 151
     6e4:	55 e0       	ldi	r21, 0x05	; 5
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	f0 d4       	rcall	.+2528   	; 0x10cc <lcd_string>
	lcd_string(1, 0, "     Seahorse Game");
     6ec:	4b ea       	ldi	r20, 0xAB	; 171
     6ee:	55 e0       	ldi	r21, 0x05	; 5
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	eb d4       	rcall	.+2518   	; 0x10cc <lcd_string>
	lcd_string(2, 0, "     ==============");
     6f6:	47 e9       	ldi	r20, 0x97	; 151
     6f8:	55 e0       	ldi	r21, 0x05	; 5
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	e6 d4       	rcall	.+2508   	; 0x10cc <lcd_string>
	lcd_string(4, 0, "Press Button to Start");
     700:	4e eb       	ldi	r20, 0xBE	; 190
     702:	55 e0       	ldi	r21, 0x05	; 5
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	e1 d4       	rcall	.+2498   	; 0x10cc <lcd_string>
     70a:	07 dd       	rcall	.-1522   	; 0x11a <printSeaHorse>
	printSeaHorse();
     70c:	80 99       	sbic	0x10, 0	; 16
     70e:	fe cf       	rjmp	.-4      	; 0x70c <Phase_1+0x72>

	while(1) {
		if((PIND & 0x01) == 0) {			// 0번 스위치가 눌리면 게임을 시작
     710:	08 95       	ret

00000712 <Phase_2>:
     712:	df 92       	push	r13
			break;
		}
	}
}
     714:	ef 92       	push	r14


void Phase_2(void) {					// Game Play
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	
	eat =0;
     720:	10 92 e1 07 	sts	0x07E1, r1	; 0x8007e1 <eat+0x1>
     724:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <eat>
	num_feed = 0;
     728:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <num_feed+0x1>
     72c:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <num_feed>
	run = 0;
     730:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <run+0x1>
     734:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <run>
	num_air =0;
     738:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <num_air+0x1>
     73c:	10 92 50 08 	sts	0x0850, r1	; 0x800850 <num_air>
	hit = 0;
     740:	10 92 4f 08 	sts	0x084F, r1	; 0x80084f <hit+0x1>
     744:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <hit>
	
	phase_flag ^= 1;
     748:	90 91 5c 08 	lds	r25, 0x085C	; 0x80085c <phase_flag>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	89 27       	eor	r24, r25
     750:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <phase_flag>
	hitbox_x = 30;
     754:	8e e1       	ldi	r24, 0x1E	; 30
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <hitbox_x+0x1>
     75c:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <hitbox_x>
	hitbox_y = 30;
     760:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <hitbox_y+0x1>
     764:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <hitbox_y>
			_delay_ms(5000);
		}
		
		if(flag) {
			move_seahorse();
			flag ^= 1;
     768:	11 e0       	ldi	r17, 0x01	; 1
		if(chance_flag) {
			fishing_rod_event();
		}
		
		if(lonely_flag) {
			if(!death[2]){
     76a:	c7 ed       	ldi	r28, 0xD7	; 215
     76c:	d7 e0       	ldi	r29, 0x07	; 7
				death_reason = 2;
     76e:	02 e0       	ldi	r16, 0x02	; 2
			}
		}
		
		if(eat == 15){
			if(!death[3]){
				death_reason = 3;
     770:	0f 2e       	mov	r0, r31
     772:	f3 e0       	ldi	r31, 0x03	; 3
     774:	df 2e       	mov	r13, r31
     776:	f0 2d       	mov	r31, r0
			}
		}
		
		if(num_feed == 9){
			if(!death[4]) {
				death_reason = 4 ;
     778:	68 94       	set
     77a:	ee 24       	eor	r14, r14
     77c:	e2 f8       	bld	r14, 2
			}
		}
		
		if(run == 20){
			if(!death[5]){
				death_reason = 5;
     77e:	0f 2e       	mov	r0, r31
     780:	f5 e0       	ldi	r31, 0x05	; 5
     782:	ff 2e       	mov	r15, r31
     784:	f0 2d       	mov	r31, r0
	phase_flag ^= 1;
	hitbox_x = 30;
	hitbox_y = 30;
	while(1) {
		
		if((PIND & 0x02) == 0) {			// 1번 스위치가 눌리면 음식을 준다
     786:	81 99       	sbic	0x10, 1	; 16
     788:	0a c0       	rjmp	.+20     	; 0x79e <Phase_2+0x8c>
			setFeed();
     78a:	80 dd       	rcall	.-1280   	; 0x28c <setFeed>
     78c:	2f e3       	ldi	r18, 0x3F	; 63
     78e:	82 e4       	ldi	r24, 0x42	; 66
     790:	9f e0       	ldi	r25, 0x0F	; 15
     792:	21 50       	subi	r18, 0x01	; 1
     794:	80 40       	sbci	r24, 0x00	; 0
     796:	90 40       	sbci	r25, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <Phase_2+0x80>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <Phase_2+0x8a>
     79c:	00 00       	nop
			_delay_ms(5000);
		}	
		
		if((PIND & 0x04) == 0){
     79e:	82 99       	sbic	0x10, 2	; 16
			eat_feed();
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <Phase_2+0xa6>
			move_seahorse();
     7a2:	25 df       	rcall	.-438    	; 0x5ee <eat_feed>
     7a4:	bb dd       	rcall	.-1162   	; 0x31c <move_seahorse>
     7a6:	2f e3       	ldi	r18, 0x3F	; 63
     7a8:	82 e4       	ldi	r24, 0x42	; 66
     7aa:	9f e0       	ldi	r25, 0x0F	; 15
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <Phase_2+0x9a>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <Phase_2+0xa4>
			_delay_ms(5000);
		}
		
		
		if((PIND & 0x08) == 0){
     7b6:	00 00       	nop
			printAir();
     7b8:	83 9b       	sbis	0x10, 3	; 16
		}
		
		if((PIND & 0x10) == 0){
     7ba:	cc de       	rcall	.-616    	; 0x554 <printAir>
     7bc:	84 99       	sbic	0x10, 4	; 16
			print_scratch();
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <Phase_2+0xc2>
     7c0:	ee dc       	rcall	.-1572   	; 0x19e <print_scratch>
     7c2:	2f e3       	ldi	r18, 0x3F	; 63
     7c4:	82 e4       	ldi	r24, 0x42	; 66
     7c6:	9f e0       	ldi	r25, 0x0F	; 15
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	90 40       	sbci	r25, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <Phase_2+0xb6>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <Phase_2+0xc0>
			_delay_ms(5000);
		}
		
		if(flag) {
     7d2:	00 00       	nop
     7d4:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <flag>
     7d8:	88 23       	and	r24, r24
			move_seahorse();
     7da:	31 f0       	breq	.+12     	; 0x7e8 <Phase_2+0xd6>
     7dc:	9f dd       	rcall	.-1218   	; 0x31c <move_seahorse>
			flag ^= 1;
     7de:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <flag>
     7e2:	81 27       	eor	r24, r17
     7e4:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <flag>
		}
		if(chance_flag) {
     7e8:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <chance_flag>
			fishing_rod_event();
     7ec:	81 11       	cpse	r24, r1
     7ee:	eb de       	rcall	.-554    	; 0x5c6 <fishing_rod_event>
		}
		
		if(lonely_flag) {
     7f0:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <lonely_flag>
     7f4:	88 23       	and	r24, r24
     7f6:	39 f0       	breq	.+14     	; 0x806 <Phase_2+0xf4>
			if(!death[2]){
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	81 11       	cpse	r24, r1
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <Phase_2+0xf4>
				death_reason = 2;
     7fe:	00 93 d6 07 	sts	0x07D6, r16	; 0x8007d6 <death_reason>
				lonely_flag =0;
     802:	10 92 52 08 	sts	0x0852, r1	; 0x800852 <lonely_flag>
			}
		}
		
		if(eat == 15){
     806:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <eat>
     80a:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <eat+0x1>
     80e:	0f 97       	sbiw	r24, 0x0f	; 15
     810:	29 f4       	brne	.+10     	; 0x81c <Phase_2+0x10a>
			if(!death[3]){
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	81 11       	cpse	r24, r1
     816:	02 c0       	rjmp	.+4      	; 0x81c <Phase_2+0x10a>
				death_reason = 3;
     818:	d0 92 d6 07 	sts	0x07D6, r13	; 0x8007d6 <death_reason>
			}
		}
		
		if(num_feed == 9){
     81c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <num_feed>
     820:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <num_feed+0x1>
     824:	09 97       	sbiw	r24, 0x09	; 9
     826:	29 f4       	brne	.+10     	; 0x832 <Phase_2+0x120>
			if(!death[4]) {
     828:	8c 81       	ldd	r24, Y+4	; 0x04
     82a:	81 11       	cpse	r24, r1
     82c:	02 c0       	rjmp	.+4      	; 0x832 <Phase_2+0x120>
				death_reason = 4 ;
     82e:	e0 92 d6 07 	sts	0x07D6, r14	; 0x8007d6 <death_reason>
			}
		}
		
		if(run == 20){
     832:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <run>
     836:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <run+0x1>
     83a:	44 97       	sbiw	r24, 0x14	; 20
     83c:	29 f4       	brne	.+10     	; 0x848 <Phase_2+0x136>
			if(!death[5]){
     83e:	8d 81       	ldd	r24, Y+5	; 0x05
     840:	81 11       	cpse	r24, r1
     842:	02 c0       	rjmp	.+4      	; 0x848 <Phase_2+0x136>
				death_reason = 5;
     844:	f0 92 d6 07 	sts	0x07D6, r15	; 0x8007d6 <death_reason>
			}
		}
		
		if(num_air == 3){
     848:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <num_air>
     84c:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <num_air+0x1>
     850:	03 97       	sbiw	r24, 0x03	; 3
     852:	69 f4       	brne	.+26     	; 0x86e <Phase_2+0x15c>
			if(!death[6]){
     854:	8e 81       	ldd	r24, Y+6	; 0x06
     856:	81 11       	cpse	r24, r1
     858:	0a c0       	rjmp	.+20     	; 0x86e <Phase_2+0x15c>
				death_reason = 6;
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
			}
		}
		
		if(hit == 10){
     860:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <hit>
     864:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <hit+0x1>
     868:	0a 97       	sbiw	r24, 0x0a	; 10
     86a:	99 f4       	brne	.+38     	; 0x892 <Phase_2+0x180>
     86c:	19 c0       	rjmp	.+50     	; 0x8a0 <Phase_2+0x18e>
     86e:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <hit>
     872:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <hit+0x1>
     876:	0a 97       	sbiw	r24, 0x0a	; 10
     878:	39 f4       	brne	.+14     	; 0x888 <Phase_2+0x176>
			if(!death[8]){
     87a:	88 85       	ldd	r24, Y+8	; 0x08
     87c:	81 11       	cpse	r24, r1
     87e:	04 c0       	rjmp	.+8      	; 0x888 <Phase_2+0x176>
				death_reason = 8;
     880:	88 e0       	ldi	r24, 0x08	; 8
     882:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <death_reason>
     886:	05 c0       	rjmp	.+10     	; 0x892 <Phase_2+0x180>
			}
		}
		
		if(death_reason > 0) {
     888:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <death_reason>
     88c:	88 23       	and	r24, r24
     88e:	09 f4       	brne	.+2      	; 0x892 <Phase_2+0x180>
     890:	7a cf       	rjmp	.-268    	; 0x786 <Phase_2+0x74>
			break;
		}
	}
	
	phase_flag ^= 1;
     892:	90 91 5c 08 	lds	r25, 0x085C	; 0x80085c <phase_flag>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	89 27       	eor	r24, r25
     89a:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <phase_flag>
}
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <Phase_2+0x198>
				death_reason = 6;
			}
		}
		
		if(hit == 10){
			if(!death[8]){
     8a0:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <death+0x8>
     8a4:	88 23       	and	r24, r24
     8a6:	61 f3       	breq	.-40     	; 0x880 <Phase_2+0x16e>
     8a8:	f4 cf       	rjmp	.-24     	; 0x892 <Phase_2+0x180>
			break;
		}
	}
	
	phase_flag ^= 1;
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	08 95       	ret

000008ba <LED_ON>:

void LED_ON(void){	//물고기가 죽으면 레벨이 올라가면서 LED가 켜진다
	S_Start();
     8ba:	17 d3       	rcall	.+1582   	; 0xeea <S_Start>
	DDRB = 0xff;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
     8c0:	18 ba       	out	0x18, r1	; 24
	if(all_death == 0){
     8c2:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     8c6:	81 11       	cpse	r24, r1
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <LED_ON+0x1e>
		LED = 0xfe;
     8ca:	8e ef       	ldi	r24, 0xFE	; 254
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 d3 07 	sts	0x07D3, r25	; 0x8007d3 <LED+0x1>
     8d2:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <LED>
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <LED_ON+0x32>
	}
	else {
		LED = (LED << 1);
     8d8:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <LED>
     8dc:	90 91 d3 07 	lds	r25, 0x07D3	; 0x8007d3 <LED+0x1>
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	90 93 d3 07 	sts	0x07D3, r25	; 0x8007d3 <LED+0x1>
     8e8:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <LED>
	}
	PORTB = LED;
     8ec:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <LED>
     8f0:	88 bb       	out	0x18, r24	; 24
     8f2:	08 95       	ret

000008f4 <Phase_3>:
}

void Phase_3(void) {					// Death Screen
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	64 97       	sbiw	r28, 0x14	; 20
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
	char death_string[20] = {};
     908:	fe 01       	movw	r30, r28
     90a:	31 96       	adiw	r30, 0x01	; 1
     90c:	84 e1       	ldi	r24, 0x14	; 20
     90e:	df 01       	movw	r26, r30
     910:	1d 92       	st	X+, r1
     912:	8a 95       	dec	r24
     914:	e9 f7       	brne	.-6      	; 0x910 <Phase_3+0x1c>
	if(death_reason == 1) {
     916:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <death_reason>
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	99 f4       	brne	.+38     	; 0x944 <Phase_3+0x50>
		LED_ON();
     91e:	cd df       	rcall	.-102    	; 0x8ba <LED_ON>
		all_death++;
     920:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[1]++;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <death+0x1>
		strcpy(death_string, "It crashed!!");
     930:	8d e0       	ldi	r24, 0x0D	; 13
     932:	e4 ed       	ldi	r30, 0xD4	; 212
     934:	f5 e0       	ldi	r31, 0x05	; 5
     936:	de 01       	movw	r26, r28
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	01 90       	ld	r0, Z+
     93c:	0d 92       	st	X+, r0
     93e:	8a 95       	dec	r24
     940:	e1 f7       	brne	.-8      	; 0x93a <Phase_3+0x46>
     942:	9e c0       	rjmp	.+316    	; 0xa80 <Phase_3+0x18c>
	} else if(death_reason == 2) {
     944:	82 30       	cpi	r24, 0x02	; 2
		LED_ON();
     946:	99 f4       	brne	.+38     	; 0x96e <Phase_3+0x7a>
     948:	b8 df       	rcall	.-144    	; 0x8ba <LED_ON>
		all_death++;
     94a:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[2]++;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <death+0x2>
		strcpy(death_string, "So lonely!");
     95a:	8b e0       	ldi	r24, 0x0B	; 11
     95c:	e1 ee       	ldi	r30, 0xE1	; 225
     95e:	f5 e0       	ldi	r31, 0x05	; 5
     960:	de 01       	movw	r26, r28
     962:	11 96       	adiw	r26, 0x01	; 1
     964:	01 90       	ld	r0, Z+
     966:	0d 92       	st	X+, r0
     968:	8a 95       	dec	r24
     96a:	e1 f7       	brne	.-8      	; 0x964 <Phase_3+0x70>
     96c:	89 c0       	rjmp	.+274    	; 0xa80 <Phase_3+0x18c>
	} else if(death_reason == 3) {
     96e:	83 30       	cpi	r24, 0x03	; 3
		LED_ON();
     970:	99 f4       	brne	.+38     	; 0x998 <Phase_3+0xa4>
     972:	a3 df       	rcall	.-186    	; 0x8ba <LED_ON>
		all_death++;
     974:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[3]++;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <death+0x3>
		strcpy(death_string, "It is full!");
     984:	8c e0       	ldi	r24, 0x0C	; 12
     986:	ec ee       	ldi	r30, 0xEC	; 236
     988:	f5 e0       	ldi	r31, 0x05	; 5
     98a:	de 01       	movw	r26, r28
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	01 90       	ld	r0, Z+
     990:	0d 92       	st	X+, r0
     992:	8a 95       	dec	r24
     994:	e1 f7       	brne	.-8      	; 0x98e <Phase_3+0x9a>
	} else if(death_reason == 4) {
     996:	74 c0       	rjmp	.+232    	; 0xa80 <Phase_3+0x18c>
     998:	84 30       	cpi	r24, 0x04	; 4
		LED_ON();
     99a:	99 f4       	brne	.+38     	; 0x9c2 <Phase_3+0xce>
     99c:	8e df       	rcall	.-228    	; 0x8ba <LED_ON>
		all_death++;
     99e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[4]++;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 db 07 	sts	0x07DB, r24	; 0x8007db <death+0x4>
		strcpy(death_string, "Water is so dirty!");
     9ae:	83 e1       	ldi	r24, 0x13	; 19
     9b0:	e8 ef       	ldi	r30, 0xF8	; 248
     9b2:	f5 e0       	ldi	r31, 0x05	; 5
     9b4:	de 01       	movw	r26, r28
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <Phase_3+0xc4>
	} else if(death_reason == 5) {
     9c0:	5f c0       	rjmp	.+190    	; 0xa80 <Phase_3+0x18c>
     9c2:	85 30       	cpi	r24, 0x05	; 5
		LED_ON();
     9c4:	99 f4       	brne	.+38     	; 0x9ec <Phase_3+0xf8>
     9c6:	79 df       	rcall	.-270    	; 0x8ba <LED_ON>
		all_death++;
     9c8:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[5]++;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <death+0x5>
		strcpy(death_string, "It is so dizzy!!");
     9d8:	81 e1       	ldi	r24, 0x11	; 17
     9da:	eb e0       	ldi	r30, 0x0B	; 11
     9dc:	f6 e0       	ldi	r31, 0x06	; 6
     9de:	de 01       	movw	r26, r28
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	01 90       	ld	r0, Z+
     9e4:	0d 92       	st	X+, r0
     9e6:	8a 95       	dec	r24
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <Phase_3+0xee>
	} else if(death_reason == 6) {
     9ea:	4a c0       	rjmp	.+148    	; 0xa80 <Phase_3+0x18c>
     9ec:	86 30       	cpi	r24, 0x06	; 6
		LED_ON();
     9ee:	99 f4       	brne	.+38     	; 0xa16 <Phase_3+0x122>
     9f0:	64 df       	rcall	.-312    	; 0x8ba <LED_ON>
		all_death++;
     9f2:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[6]++;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <death+0x6>
		strcpy(death_string, "Be swept away..");
     a02:	80 e1       	ldi	r24, 0x10	; 16
     a04:	ec e1       	ldi	r30, 0x1C	; 28
     a06:	f6 e0       	ldi	r31, 0x06	; 6
     a08:	de 01       	movw	r26, r28
     a0a:	11 96       	adiw	r26, 0x01	; 1
     a0c:	01 90       	ld	r0, Z+
     a0e:	0d 92       	st	X+, r0
     a10:	8a 95       	dec	r24
     a12:	e1 f7       	brne	.-8      	; 0xa0c <Phase_3+0x118>
	} else if(death_reason == 7) {
     a14:	35 c0       	rjmp	.+106    	; 0xa80 <Phase_3+0x18c>
     a16:	87 30       	cpi	r24, 0x07	; 7
		LED_ON();
     a18:	99 f4       	brne	.+38     	; 0xa40 <Phase_3+0x14c>
     a1a:	4f df       	rcall	.-354    	; 0x8ba <LED_ON>
		all_death++;
     a1c:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[7]++;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <death+0x7>
		strcpy(death_string, "It eats trash..");
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	ec e2       	ldi	r30, 0x2C	; 44
     a30:	f6 e0       	ldi	r31, 0x06	; 6
     a32:	de 01       	movw	r26, r28
     a34:	11 96       	adiw	r26, 0x01	; 1
     a36:	01 90       	ld	r0, Z+
     a38:	0d 92       	st	X+, r0
     a3a:	8a 95       	dec	r24
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <Phase_3+0x142>
	} else if(death_reason == 8) {
     a3e:	20 c0       	rjmp	.+64     	; 0xa80 <Phase_3+0x18c>
     a40:	88 30       	cpi	r24, 0x08	; 8
		LED_ON();
     a42:	99 f4       	brne	.+38     	; 0xa6a <Phase_3+0x176>
     a44:	3a df       	rcall	.-396    	; 0x8ba <LED_ON>
		all_death++;
     a46:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <all_death>
		death[8]++;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <death+0x8>
		strcpy(death_string, "Fishbowl is broken.");
     a56:	84 e1       	ldi	r24, 0x14	; 20
     a58:	eb eb       	ldi	r30, 0xBB	; 187
     a5a:	f7 e0       	ldi	r31, 0x07	; 7
     a5c:	de 01       	movw	r26, r28
     a5e:	11 96       	adiw	r26, 0x01	; 1
     a60:	01 90       	ld	r0, Z+
     a62:	0d 92       	st	X+, r0
     a64:	8a 95       	dec	r24
     a66:	e1 f7       	brne	.-8      	; 0xa60 <Phase_3+0x16c>
     a68:	0b c0       	rjmp	.+22     	; 0xa80 <Phase_3+0x18c>
	} else if(death_reason == 9) {
     a6a:	89 30       	cpi	r24, 0x09	; 9
     a6c:	49 f4       	brne	.+18     	; 0xa80 <Phase_3+0x18c>
		strcpy(death_string, "Fishing Rod Kill");
     a6e:	81 e1       	ldi	r24, 0x11	; 17
     a70:	ec e3       	ldi	r30, 0x3C	; 60
     a72:	f6 e0       	ldi	r31, 0x06	; 6
     a74:	de 01       	movw	r26, r28
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	8a 95       	dec	r24
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <Phase_3+0x184>
     a80:	bf e3       	ldi	r27, 0x3F	; 63
     a82:	e2 e4       	ldi	r30, 0x42	; 66
     a84:	ff e0       	ldi	r31, 0x0F	; 15
     a86:	b1 50       	subi	r27, 0x01	; 1
     a88:	e0 40       	sbci	r30, 0x00	; 0
     a8a:	f0 40       	sbci	r31, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <Phase_3+0x192>
	}
	

	_delay_ms(5000);
	lcd_clear();
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <Phase_3+0x19c>
     a90:	00 00       	nop
	ScreenBuffer_clear();
     a92:	be d2       	rcall	.+1404   	; 0x1010 <lcd_clear>

	lcd_string(0, 0, "====================");
     a94:	a9 d3       	rcall	.+1874   	; 0x11e8 <ScreenBuffer_clear>
     a96:	4d e4       	ldi	r20, 0x4D	; 77
     a98:	56 e0       	ldi	r21, 0x06	; 6
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
	lcd_string(1, 0, " Seahorse Died..i-i ");
     a9e:	16 d3       	rcall	.+1580   	; 0x10cc <lcd_string>
     aa0:	42 e6       	ldi	r20, 0x62	; 98
     aa2:	56 e0       	ldi	r21, 0x06	; 6
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	81 e0       	ldi	r24, 0x01	; 1
	lcd_string(2, 0, death_string);
     aa8:	11 d3       	rcall	.+1570   	; 0x10cc <lcd_string>
     aaa:	ae 01       	movw	r20, r28
     aac:	4f 5f       	subi	r20, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	82 e0       	ldi	r24, 0x02	; 2
	lcd_string(3, 0, "  But don't worry!  ");
     ab4:	0b d3       	rcall	.+1558   	; 0x10cc <lcd_string>
     ab6:	47 e7       	ldi	r20, 0x77	; 119
     ab8:	56 e0       	ldi	r21, 0x06	; 6
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	83 e0       	ldi	r24, 0x03	; 3
	lcd_string(4, 0, "Seahorse has a child");
     abe:	06 d3       	rcall	.+1548   	; 0x10cc <lcd_string>
     ac0:	4c e8       	ldi	r20, 0x8C	; 140
     ac2:	56 e0       	ldi	r21, 0x06	; 6
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	84 e0       	ldi	r24, 0x04	; 4
	lcd_string(5, 0, " Restart with child ");
     ac8:	01 d3       	rcall	.+1538   	; 0x10cc <lcd_string>
     aca:	41 ea       	ldi	r20, 0xA1	; 161
     acc:	56 e0       	ldi	r21, 0x06	; 6
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	fc d2       	rcall	.+1528   	; 0x10cc <lcd_string>
	lcd_string(6, 0, "  <<Press Button>>  ");
     ad4:	46 eb       	ldi	r20, 0xB6	; 182
     ad6:	56 e0       	ldi	r21, 0x06	; 6
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	f7 d2       	rcall	.+1518   	; 0x10cc <lcd_string>
     ade:	4d e4       	ldi	r20, 0x4D	; 77
	lcd_string(7, 0, "====================");
     ae0:	56 e0       	ldi	r21, 0x06	; 6
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	f2 d2       	rcall	.+1508   	; 0x10cc <lcd_string>
     ae8:	80 99       	sbic	0x10, 0	; 16
	while(1) {
		if((PIND & 0x01) == 0) {
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <Phase_3+0x1f4>

			if(death_reason == 9) {
     aec:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <death_reason>
     af0:	89 30       	cpi	r24, 0x09	; 9
     af2:	09 f0       	breq	.+2      	; 0xaf6 <Phase_3+0x202>
     af4:	97 c0       	rjmp	.+302    	; 0xc24 <Phase_3+0x330>
     af6:	2f e3       	ldi	r18, 0x3F	; 63
     af8:	82 e4       	ldi	r24, 0x42	; 66
     afa:	9f e0       	ldi	r25, 0x0F	; 15
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <Phase_3+0x208>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <Phase_3+0x212>
     b06:	00 00       	nop
				_delay_ms(5000);
				lcd_clear();
     b08:	83 d2       	rcall	.+1286   	; 0x1010 <lcd_clear>
     b0a:	6e d3       	rcall	.+1756   	; 0x11e8 <ScreenBuffer_clear>
				ScreenBuffer_clear();
     b0c:	87 d6       	rcall	.+3342   	; 0x181c <rand>
     b0e:	87 70       	andi	r24, 0x07	; 7
				uint8_t hint = 0;
			REPEAT:
				hint = (rand() % 8) + 1;
     b10:	90 78       	andi	r25, 0x80	; 128
     b12:	99 23       	and	r25, r25
     b14:	24 f4       	brge	.+8      	; 0xb1e <Phase_3+0x22a>
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	88 6f       	ori	r24, 0xF8	; 248
     b1a:	9f 6f       	ori	r25, 0xFF	; 255
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	e8 2f       	mov	r30, r24
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e9 52       	subi	r30, 0x29	; 41
				if(death[hint]) {
     b26:	f8 4f       	sbci	r31, 0xF8	; 248
     b28:	90 81       	ld	r25, Z
     b2a:	91 11       	cpse	r25, r1
     b2c:	ef cf       	rjmp	.-34     	; 0xb0c <Phase_3+0x218>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	51 f4       	brne	.+20     	; 0xb46 <Phase_3+0x252>
     b32:	89 e1       	ldi	r24, 0x19	; 25
					goto REPEAT;
				}
				if(hint == 1) {
     b34:	eb ec       	ldi	r30, 0xCB	; 203
     b36:	f6 e0       	ldi	r31, 0x06	; 6
					strcpy(death_string, "Fishbowl has glass walls");
     b38:	de 01       	movw	r26, r28
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <Phase_3+0x248>
     b44:	53 c0       	rjmp	.+166    	; 0xbec <Phase_3+0x2f8>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	51 f4       	brne	.+20     	; 0xb5e <Phase_3+0x26a>
     b4a:	82 e1       	ldi	r24, 0x12	; 18
				} else if(hint == 2) {
     b4c:	e4 ee       	ldi	r30, 0xE4	; 228
     b4e:	f6 e0       	ldi	r31, 0x06	; 6
					strcpy(death_string, "It wants friend..");
     b50:	de 01       	movw	r26, r28
     b52:	11 96       	adiw	r26, 0x01	; 1
     b54:	01 90       	ld	r0, Z+
     b56:	0d 92       	st	X+, r0
     b58:	8a 95       	dec	r24
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <Phase_3+0x260>
     b5c:	47 c0       	rjmp	.+142    	; 0xbec <Phase_3+0x2f8>
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	51 f4       	brne	.+20     	; 0xb76 <Phase_3+0x282>
     b62:	8d e0       	ldi	r24, 0x0D	; 13
				} else if(hint == 3) {
     b64:	e6 ef       	ldi	r30, 0xF6	; 246
     b66:	f6 e0       	ldi	r31, 0x06	; 6
					strcpy(death_string, "It hate full");
     b68:	de 01       	movw	r26, r28
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	01 90       	ld	r0, Z+
     b6e:	0d 92       	st	X+, r0
     b70:	8a 95       	dec	r24
     b72:	e1 f7       	brne	.-8      	; 0xb6c <Phase_3+0x278>
     b74:	3b c0       	rjmp	.+118    	; 0xbec <Phase_3+0x2f8>
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	51 f4       	brne	.+20     	; 0xb8e <Phase_3+0x29a>
     b7a:	80 e1       	ldi	r24, 0x10	; 16
				} else if(hint == 4) {
     b7c:	e3 e0       	ldi	r30, 0x03	; 3
     b7e:	f7 e0       	ldi	r31, 0x07	; 7
					strcpy(death_string, "It loves fresh!");
     b80:	de 01       	movw	r26, r28
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	01 90       	ld	r0, Z+
     b86:	0d 92       	st	X+, r0
     b88:	8a 95       	dec	r24
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <Phase_3+0x290>
     b8c:	2f c0       	rjmp	.+94     	; 0xbec <Phase_3+0x2f8>
     b8e:	85 30       	cpi	r24, 0x05	; 5
     b90:	51 f4       	brne	.+20     	; 0xba6 <Phase_3+0x2b2>
     b92:	81 e1       	ldi	r24, 0x11	; 17
				} else if(hint == 5) {
     b94:	e3 e1       	ldi	r30, 0x13	; 19
     b96:	f7 e0       	ldi	r31, 0x07	; 7
					strcpy(death_string, "It loves to stay");
     b98:	de 01       	movw	r26, r28
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	01 90       	ld	r0, Z+
     b9e:	0d 92       	st	X+, r0
     ba0:	8a 95       	dec	r24
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <Phase_3+0x2a8>
     ba4:	23 c0       	rjmp	.+70     	; 0xbec <Phase_3+0x2f8>
     ba6:	86 30       	cpi	r24, 0x06	; 6
     ba8:	51 f4       	brne	.+20     	; 0xbbe <Phase_3+0x2ca>
     baa:	82 e1       	ldi	r24, 0x12	; 18
				} else if(hint == 6) {
     bac:	e4 e2       	ldi	r30, 0x24	; 36
     bae:	f7 e0       	ldi	r31, 0x07	; 7
					strcpy(death_string, "It is bad swimmer");
     bb0:	de 01       	movw	r26, r28
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	8a 95       	dec	r24
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <Phase_3+0x2c0>
     bbc:	17 c0       	rjmp	.+46     	; 0xbec <Phase_3+0x2f8>
     bbe:	87 30       	cpi	r24, 0x07	; 7
     bc0:	51 f4       	brne	.+20     	; 0xbd6 <Phase_3+0x2e2>
     bc2:	81 e1       	ldi	r24, 0x11	; 17
				} else if(hint == 7) {
     bc4:	e6 e3       	ldi	r30, 0x36	; 54
     bc6:	f7 e0       	ldi	r31, 0x07	; 7
					strcpy(death_string, "Don't give trash");
     bc8:	de 01       	movw	r26, r28
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	8a 95       	dec	r24
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <Phase_3+0x2d8>
     bd4:	0b c0       	rjmp	.+22     	; 0xbec <Phase_3+0x2f8>
				} else if(hint == 8) {
     bd6:	88 30       	cpi	r24, 0x08	; 8
     bd8:	49 f4       	brne	.+18     	; 0xbec <Phase_3+0x2f8>
					strcpy(death_string, "Don't hit the wall");
     bda:	83 e1       	ldi	r24, 0x13	; 19
     bdc:	e7 e4       	ldi	r30, 0x47	; 71
     bde:	f7 e0       	ldi	r31, 0x07	; 7
     be0:	de 01       	movw	r26, r28
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	01 90       	ld	r0, Z+
     be6:	0d 92       	st	X+, r0
				}
				lcd_clear();
     be8:	8a 95       	dec	r24
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <Phase_3+0x2f0>
				ScreenBuffer_clear();
     bec:	11 d2       	rcall	.+1058   	; 0x1010 <lcd_clear>
     bee:	fc d2       	rcall	.+1528   	; 0x11e8 <ScreenBuffer_clear>
				lcd_string(0, 0, "HINT:");
     bf0:	4a e5       	ldi	r20, 0x5A	; 90
     bf2:	57 e0       	ldi	r21, 0x07	; 7
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	69 d2       	rcall	.+1234   	; 0x10cc <lcd_string>
     bfa:	ae 01       	movw	r20, r28
				lcd_string(1, 0, death_string);
     bfc:	4f 5f       	subi	r20, 0xFF	; 255
     bfe:	5f 4f       	sbci	r21, 0xFF	; 255
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	63 d2       	rcall	.+1222   	; 0x10cc <lcd_string>
     c06:	40 e6       	ldi	r20, 0x60	; 96
     c08:	57 e0       	ldi	r21, 0x07	; 7
				lcd_string(3, 0, "<<Press Button>>");
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	5e d2       	rcall	.+1212   	; 0x10cc <lcd_string>
     c10:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <chance_time>
     c14:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <chance_time+0x1>
				hint =0;
				chance_time = 0;
     c18:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <chance_time+0x2>
     c1c:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <chance_time+0x3>
     c20:	10 92 57 08 	sts	0x0857, r1	; 0x800857 <chance_flag>
     c24:	10 92 d6 07 	sts	0x07D6, r1	; 0x8007d6 <death_reason>
				chance_flag = 0;				
     c28:	80 99       	sbic	0x10, 0	; 16
			}

			death_reason = 0;
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <Phase_3+0x334>
     c2c:	a0 e2       	ldi	r26, 0x20	; 32
			while(1) {
			if((PIND & 0x01) == 0) {
     c2e:	b8 e0       	ldi	r27, 0x08	; 8
     c30:	48 ef       	ldi	r20, 0xF8	; 248
     c32:	57 e0       	ldi	r21, 0x07	; 7
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	1d 92       	st	X+, r1
     c3a:	1d 92       	st	X+, r1
			}
			break;
		}
	}
	for(int i = 0; i< 20; i++){
			x_feed[i] =0;
     c3c:	fa 01       	movw	r30, r20
     c3e:	11 92       	st	Z+, r1
			y_feed[i] =0;
     c40:	11 92       	st	Z+, r1
     c42:	af 01       	movw	r20, r30
     c44:	9c 01       	movw	r18, r24
			num_feed =0;
			feed_flag[i] =0;
     c46:	2e 51       	subi	r18, 0x1E	; 30
     c48:	38 4f       	sbci	r19, 0xF8	; 248
     c4a:	f9 01       	movw	r30, r18
     c4c:	10 82       	st	Z, r1
     c4e:	01 96       	adiw	r24, 0x01	; 1
			}
			}
			break;
		}
	}
	for(int i = 0; i< 20; i++){
     c50:	84 31       	cpi	r24, 0x14	; 20
     c52:	91 05       	cpc	r25, r1
     c54:	89 f7       	brne	.-30     	; 0xc38 <Phase_3+0x344>
     c56:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <num_feed+0x1>
     c5a:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <num_feed>
     c5e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <all_death>
			y_feed[i] =0;
			num_feed =0;
			feed_flag[i] =0;
	}
	
		if(all_death == 8) {
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	09 f0       	breq	.+2      	; 0xc68 <Phase_3+0x374>
			while(1) {
				Data_ADC0 = Read_Adc_Data(0) / 10;  //0번 아날로그 포트 읽기
     c66:	38 c0       	rjmp	.+112    	; 0xcd8 <Phase_3+0x3e4>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	f4 d0       	rcall	.+488    	; 0xe54 <Read_Adc_Data>
     c6c:	9c 01       	movw	r18, r24
     c6e:	ad ec       	ldi	r26, 0xCD	; 205
     c70:	bc ec       	ldi	r27, 0xCC	; 204
     c72:	7e d5       	rcall	.+2812   	; 0x1770 <__umulhisi3>
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <__data_end+0x1>
     c84:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__data_end>
     c88:	8f e4       	ldi	r24, 0x4F	; 79
     c8a:	93 ec       	ldi	r25, 0xC3	; 195
     c8c:	01 97       	sbiw	r24, 0x01	; 1
				_delay_ms(200);
				lcd_clear();
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <Phase_3+0x398>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <Phase_3+0x39e>
				ScreenBuffer_clear();
     c92:	00 00       	nop
				lcd_string(0, 0, "    ==============");
     c94:	bd d1       	rcall	.+890    	; 0x1010 <lcd_clear>
     c96:	a8 d2       	rcall	.+1360   	; 0x11e8 <ScreenBuffer_clear>
     c98:	48 e9       	ldi	r20, 0x98	; 152
     c9a:	55 e0       	ldi	r21, 0x05	; 5
     c9c:	60 e0       	ldi	r22, 0x00	; 0
				lcd_string(1, 0, "    YOU WIN!!!!!!!");
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	15 d2       	rcall	.+1066   	; 0x10cc <lcd_string>
     ca2:	41 e7       	ldi	r20, 0x71	; 113
     ca4:	57 e0       	ldi	r21, 0x07	; 7
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
				lcd_string(2, 0, "    ==============");
     caa:	10 d2       	rcall	.+1056   	; 0x10cc <lcd_string>
     cac:	48 e9       	ldi	r20, 0x98	; 152
     cae:	55 e0       	ldi	r21, 0x05	; 5
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	0b d2       	rcall	.+1046   	; 0x10cc <lcd_string>
				lcd_string(3, 0, "Your Seahorse Won");
     cb6:	44 e8       	ldi	r20, 0x84	; 132
     cb8:	57 e0       	ldi	r21, 0x07	; 7
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	06 d2       	rcall	.+1036   	; 0x10cc <lcd_string>
     cc0:	46 e9       	ldi	r20, 0x96	; 150
				lcd_string(4, 0, "GAME COMPLETE!");
     cc2:	57 e0       	ldi	r21, 0x07	; 7
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	01 d2       	rcall	.+1026   	; 0x10cc <lcd_string>
     cca:	45 ea       	ldi	r20, 0xA5	; 165
     ccc:	57 e0       	ldi	r21, 0x07	; 7
				lcd_string(5, 0, "Thank you for playing");
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	fc d1       	rcall	.+1016   	; 0x10cc <lcd_string>
     cd4:	22 da       	rcall	.-3004   	; 0x11a <printSeaHorse>
     cd6:	c8 cf       	rjmp	.-112    	; 0xc68 <Phase_3+0x374>
     cd8:	64 96       	adiw	r28, 0x14	; 20
				printSeaHorse();
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
			}
		}
}
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <main>:
     cea:	10 da       	rcall	.-3040   	; 0x10c <init_devices>
     cec:	91 d1       	rcall	.+802    	; 0x1010 <lcd_clear>
     cee:	d5 dc       	rcall	.-1622   	; 0x69a <Phase_1>
     cf0:	10 dd       	rcall	.-1504   	; 0x712 <Phase_2>
	init_devices();
	lcd_clear();

	while(1) {
		Phase_1();
		Phase_2();
     cf2:	00 de       	rcall	.-1024   	; 0x8f4 <Phase_3>
		Phase_3();
     cf4:	fc cf       	rjmp	.-8      	; 0xcee <main+0x4>

00000cf6 <__vector_15>:
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
	}
}

ISR(TIMER0_COMP_vect) {
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	0b b6       	in	r0, 0x3b	; 59
     d02:	0f 92       	push	r0
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	4f 93       	push	r20
     d0a:	5f 93       	push	r21
     d0c:	6f 93       	push	r22
     d0e:	7f 93       	push	r23
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
	if(phase_flag) {
     d20:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <phase_flag>
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <__vector_15+0x34>
     d28:	79 c0       	rjmp	.+242    	; 0xe1c <__vector_15+0x126>
		timer_cnt++;
     d2a:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <timer_cnt>
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <timer_cnt>
		if(timer_cnt == 50) {				// 50ms 마다 해마 움직일 수 있는 flag
     d34:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <timer_cnt>
     d38:	82 33       	cpi	r24, 0x32	; 50
     d3a:	09 f0       	breq	.+2      	; 0xd3e <__vector_15+0x48>
     d3c:	6f c0       	rjmp	.+222    	; 0xe1c <__vector_15+0x126>
			flag ^= 1;
     d3e:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <flag>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 27       	eor	r24, r25
     d46:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <flag>
			timer_cnt = 0;
     d4a:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <timer_cnt>
			chance_time = (rand() % 500) + 1;
     d4e:	66 d5       	rcall	.+2764   	; 0x181c <rand>
     d50:	64 ef       	ldi	r22, 0xF4	; 244
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	fa d4       	rcall	.+2548   	; 0x174a <__divmodhi4>
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	09 2e       	mov	r0, r25
     d5a:	00 0c       	add	r0, r0
     d5c:	aa 0b       	sbc	r26, r26
     d5e:	bb 0b       	sbc	r27, r27
     d60:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <chance_time>
     d64:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <chance_time+0x1>
     d68:	a0 93 5a 08 	sts	0x085A, r26	; 0x80085a <chance_time+0x2>
     d6c:	b0 93 5b 08 	sts	0x085B, r27	; 0x80085b <chance_time+0x3>
			if(death[2] == 0){
     d70:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <death+0x2>
     d74:	81 11       	cpse	r24, r1
				lonely_time = (rand() % 1000) + 1;
     d76:	11 c0       	rjmp	.+34     	; 0xd9a <__vector_15+0xa4>
     d78:	51 d5       	rcall	.+2722   	; 0x181c <rand>
     d7a:	68 ee       	ldi	r22, 0xE8	; 232
     d7c:	73 e0       	ldi	r23, 0x03	; 3
     d7e:	e5 d4       	rcall	.+2506   	; 0x174a <__divmodhi4>
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	09 2e       	mov	r0, r25
     d84:	00 0c       	add	r0, r0
     d86:	aa 0b       	sbc	r26, r26
     d88:	bb 0b       	sbc	r27, r27
     d8a:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <lonely_time>
     d8e:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <lonely_time+0x1>
     d92:	a0 93 55 08 	sts	0x0855, r26	; 0x800855 <lonely_time+0x2>
     d96:	b0 93 56 08 	sts	0x0856, r27	; 0x800856 <lonely_time+0x3>
			}
			if(air_run == 0 && chance_time == 5) {
     d9a:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <air_run>
     d9e:	81 11       	cpse	r24, r1
     da0:	26 c0       	rjmp	.+76     	; 0xdee <__vector_15+0xf8>
     da2:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <chance_time>
     da6:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <chance_time+0x1>
     daa:	a0 91 5a 08 	lds	r26, 0x085A	; 0x80085a <chance_time+0x2>
     dae:	b0 91 5b 08 	lds	r27, 0x085B	; 0x80085b <chance_time+0x3>
     db2:	05 97       	sbiw	r24, 0x05	; 5
     db4:	a1 05       	cpc	r26, r1
     db6:	b1 05       	cpc	r27, r1
     db8:	d1 f4       	brne	.+52     	; 0xdee <__vector_15+0xf8>
				chance_flag = 1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <chance_flag>
     dc0:	a0 e2       	ldi	r26, 0x20	; 32
     dc2:	b8 e0       	ldi	r27, 0x08	; 8
     dc4:	e8 ef       	ldi	r30, 0xF8	; 248
     dc6:	f7 e0       	ldi	r31, 0x07	; 7
				for(int i = 0; i< 20; i++){
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
					x_feed[i] =0;
     dcc:	1d 92       	st	X+, r1
     dce:	1d 92       	st	X+, r1
					y_feed[i] =0;
     dd0:	11 92       	st	Z+, r1
     dd2:	11 92       	st	Z+, r1
					num_feed =0;
					feed_flag[i] =0;
     dd4:	ec 01       	movw	r28, r24
     dd6:	ce 51       	subi	r28, 0x1E	; 30
     dd8:	d8 4f       	sbci	r29, 0xF8	; 248
     dda:	18 82       	st	Y, r1
			if(death[2] == 0){
				lonely_time = (rand() % 1000) + 1;
			}
			if(air_run == 0 && chance_time == 5) {
				chance_flag = 1;
				for(int i = 0; i< 20; i++){
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	84 31       	cpi	r24, 0x14	; 20
     de0:	91 05       	cpc	r25, r1
     de2:	a1 f7       	brne	.-24     	; 0xdcc <__vector_15+0xd6>
     de4:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <num_feed+0x1>
     de8:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <num_feed>
					x_feed[i] =0;
					y_feed[i] =0;
					num_feed =0;
					feed_flag[i] =0;
	}
				S_S6();
     dec:	a7 d0       	rcall	.+334    	; 0xf3c <S_S6>
			}
			if(lonely_time == 5){
     dee:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <lonely_time>
     df2:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <lonely_time+0x1>
     df6:	a0 91 55 08 	lds	r26, 0x0855	; 0x800855 <lonely_time+0x2>
     dfa:	b0 91 56 08 	lds	r27, 0x0856	; 0x800856 <lonely_time+0x3>
     dfe:	05 97       	sbiw	r24, 0x05	; 5
     e00:	a1 05       	cpc	r26, r1
     e02:	b1 05       	cpc	r27, r1
     e04:	59 f4       	brne	.+22     	; 0xe1c <__vector_15+0x126>
				lonely_flag = 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <lonely_flag>
				lonely_time = 0;
     e0c:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <lonely_time>
     e10:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <lonely_time+0x1>
     e14:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <lonely_time+0x2>
     e18:	10 92 56 08 	sts	0x0856, r1	; 0x800856 <lonely_time+0x3>
			}
		}
	}
}
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0b be       	out	0x3b, r0	; 59
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <Adc_init>:
#define ADC_2_56_TYPE 0xC0      // A/D 컨버터 사용 기준 전압  2.56 설정

//ADC initialize
void Adc_init(void)
{
	ADCSRA = 0x00;	// disable adc
     e46:	16 b8       	out	0x06, r1	; 6
	ADMUX  = 0x00; 	// select adc input 0
     e48:	17 b8       	out	0x07, r1	; 7
	ACSR   = 0x80;	//
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0xC3;	// Conversion time: 6uS
     e4e:	83 ec       	ldi	r24, 0xC3	; 195
     e50:	86 b9       	out	0x06, r24	; 6
     e52:	08 95       	ret

00000e54 <Read_Adc_Data>:
}
unsigned int Read_Adc_Data(unsigned char adc_input)   // ADC  읽어 들이기
{	unsigned int adc = 0;
	ADCSRA = 0xC3;    // Conversion time: 6uS
     e54:	93 ec       	ldi	r25, 0xC3	; 195
     e56:	96 b9       	out	0x06, r25	; 6
	//CLI();
	ADMUX = adc_input | ADC_AVCC_TYPE ;      // adc  사용 핀 설정
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	87 b9       	out	0x07, r24	; 7
	//ADMUX.3 = 1;
	ADCSRA |= 0x40;                            // Wait for the AD conversion to complete
     e5c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) != 0x10);
     e5e:	34 9b       	sbis	0x06, 4	; 6
     e60:	fe cf       	rjmp	.-4      	; 0xe5e <Read_Adc_Data+0xa>
	adc += ADCL + ( ADCH * 256 );
     e62:	24 b1       	in	r18, 0x04	; 4
     e64:	85 b1       	in	r24, 0x05	; 5
	//SEI();
	ADCSRA = 0x00;
     e66:	16 b8       	out	0x06, r1	; 6
	return adc;
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	98 2f       	mov	r25, r24
     e6c:	88 27       	eor	r24, r24
}
     e6e:	82 0f       	add	r24, r18
     e70:	91 1d       	adc	r25, r1
     e72:	08 95       	ret

00000e74 <delay_us_Melody>:
	Sound(BB,BSo);                      
}
void S_S5()    
{    
	Sound(BB,BDo);    
	Sound(BB,BMi);                          
     e74:	18 16       	cp	r1, r24
     e76:	19 06       	cpc	r1, r25
     e78:	5c f4       	brge	.+22     	; 0xe90 <delay_us_Melody+0x1c>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	45 e0       	ldi	r20, 0x05	; 5
     e80:	4a 95       	dec	r20
     e82:	f1 f7       	brne	.-4      	; 0xe80 <delay_us_Melody+0xc>
     e84:	00 00       	nop
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	b9 f7       	brne	.-18     	; 0xe7e <delay_us_Melody+0xa>
     e90:	08 95       	ret

00000e92 <Sound>:
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	7b 01       	movw	r14, r22
     ea0:	28 ee       	ldi	r18, 0xE8	; 232
     ea2:	33 e0       	ldi	r19, 0x03	; 3
     ea4:	ac 01       	movw	r20, r24
     ea6:	42 9f       	mul	r20, r18
     ea8:	c0 01       	movw	r24, r0
     eaa:	43 9f       	mul	r20, r19
     eac:	90 0d       	add	r25, r0
     eae:	52 9f       	mul	r21, r18
     eb0:	90 0d       	add	r25, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	36 d4       	rcall	.+2156   	; 0x1722 <__udivmodhi4>
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	81 f0       	breq	.+32     	; 0xedc <Sound+0x4a>
     ebc:	8b 01       	movw	r16, r22
     ebe:	c5 e6       	ldi	r28, 0x65	; 101
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
     ec2:	88 81       	ld	r24, Y
     ec4:	80 61       	ori	r24, 0x10	; 16
     ec6:	88 83       	st	Y, r24
     ec8:	c7 01       	movw	r24, r14
     eca:	d4 df       	rcall	.-88     	; 0xe74 <delay_us_Melody>
     ecc:	88 81       	ld	r24, Y
     ece:	8f 7e       	andi	r24, 0xEF	; 239
     ed0:	88 83       	st	Y, r24
     ed2:	c7 01       	movw	r24, r14
     ed4:	cf df       	rcall	.-98     	; 0xe74 <delay_us_Melody>
     ed6:	01 50       	subi	r16, 0x01	; 1
     ed8:	11 09       	sbc	r17, r1
     eda:	99 f7       	brne	.-26     	; 0xec2 <Sound+0x30>
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	08 95       	ret

00000eea <S_Start>:
     eea:	65 e6       	ldi	r22, 0x65	; 101
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	83 e2       	ldi	r24, 0x23	; 35
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	cf df       	rcall	.-98     	; 0xe92 <Sound>
     ef4:	6a e5       	ldi	r22, 0x5A	; 90
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	8e e1       	ldi	r24, 0x1E	; 30
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	ca df       	rcall	.-108    	; 0xe92 <Sound>
     efe:	60 e5       	ldi	r22, 0x50	; 80
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	83 e2       	ldi	r24, 0x23	; 35
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	c5 df       	rcall	.-118    	; 0xe92 <Sound>
     f08:	6c e4       	ldi	r22, 0x4C	; 76
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	8e e1       	ldi	r24, 0x1E	; 30
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	c0 df       	rcall	.-128    	; 0xe92 <Sound>
     f12:	64 e4       	ldi	r22, 0x44	; 68
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	83 e2       	ldi	r24, 0x23	; 35
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	bb df       	rcall	.-138    	; 0xe92 <Sound>
     f1c:	6d e3       	ldi	r22, 0x3D	; 61
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	8e e1       	ldi	r24, 0x1E	; 30
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	b6 df       	rcall	.-148    	; 0xe92 <Sound>
     f26:	66 e3       	ldi	r22, 0x36	; 54
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	83 e2       	ldi	r24, 0x23	; 35
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	b1 df       	rcall	.-158    	; 0xe92 <Sound>
     f30:	63 e3       	ldi	r22, 0x33	; 51
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8e e1       	ldi	r24, 0x1E	; 30
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	ac cf       	rjmp	.-168    	; 0xe92 <Sound>
     f3a:	08 95       	ret

00000f3c <S_S6>:
}
void S_S6()    
{    
     f3c:	cf 93       	push	r28
     f3e:	c4 e0       	ldi	r28, 0x04	; 4
	unsigned char i;    
	for(i=0; i<4; i++)  
	{    Sound(BB,HSo);    Sound(BB,HDo);    
     f40:	64 e4       	ldi	r22, 0x44	; 68
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	83 e2       	ldi	r24, 0x23	; 35
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a4 df       	rcall	.-184    	; 0xe92 <Sound>
     f4a:	65 e6       	ldi	r22, 0x65	; 101
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	83 e2       	ldi	r24, 0x23	; 35
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9f df       	rcall	.-194    	; 0xe92 <Sound>
     f54:	c1 50       	subi	r28, 0x01	; 1
	Sound(BB,BMi);                          
}
void S_S6()    
{    
	unsigned char i;    
	for(i=0; i<4; i++)  
     f56:	a1 f7       	brne	.-24     	; 0xf40 <S_S6+0x4>
	{    Sound(BB,HSo);    Sound(BB,HDo);    
		}    
}
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <cmndl>:
			y = y1 + (unsigned char)s;
			GLCD_Dot(x,y);
			y = y1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
	}
     f5c:	1d 9a       	sbi	0x03, 5	; 3
     f5e:	91 e3       	ldi	r25, 0x31	; 49
     f60:	9a 95       	dec	r25
     f62:	f1 f7       	brne	.-4      	; 0xf60 <cmndl+0x4>
     f64:	00 00       	nop
     f66:	1c 98       	cbi	0x03, 4	; 3
     f68:	1e 98       	cbi	0x03, 6	; 3
     f6a:	1f 9a       	sbi	0x03, 7	; 3
     f6c:	8b bb       	out	0x1b, r24	; 27
     f6e:	81 e3       	ldi	r24, 0x31	; 49
     f70:	8a 95       	dec	r24
     f72:	f1 f7       	brne	.-4      	; 0xf70 <cmndl+0x14>
     f74:	00 00       	nop
     f76:	1d 98       	cbi	0x03, 5	; 3
     f78:	08 95       	ret

00000f7a <cmndr>:
     f7a:	1d 9a       	sbi	0x03, 5	; 3
     f7c:	91 e3       	ldi	r25, 0x31	; 49
     f7e:	9a 95       	dec	r25
     f80:	f1 f7       	brne	.-4      	; 0xf7e <cmndr+0x4>
     f82:	00 00       	nop
     f84:	1c 98       	cbi	0x03, 4	; 3
     f86:	1e 9a       	sbi	0x03, 6	; 3
     f88:	1f 98       	cbi	0x03, 7	; 3
     f8a:	8b bb       	out	0x1b, r24	; 27
     f8c:	81 e3       	ldi	r24, 0x31	; 49
     f8e:	8a 95       	dec	r24
     f90:	f1 f7       	brne	.-4      	; 0xf8e <cmndr+0x14>
     f92:	00 00       	nop
     f94:	1d 98       	cbi	0x03, 5	; 3
     f96:	08 95       	ret

00000f98 <cmnda>:
     f98:	1d 9a       	sbi	0x03, 5	; 3
     f9a:	91 e3       	ldi	r25, 0x31	; 49
     f9c:	9a 95       	dec	r25
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <cmnda+0x4>
     fa0:	00 00       	nop
     fa2:	1c 98       	cbi	0x03, 4	; 3
     fa4:	1e 9a       	sbi	0x03, 6	; 3
     fa6:	1f 9a       	sbi	0x03, 7	; 3
     fa8:	8b bb       	out	0x1b, r24	; 27
     faa:	81 e3       	ldi	r24, 0x31	; 49
     fac:	8a 95       	dec	r24
     fae:	f1 f7       	brne	.-4      	; 0xfac <cmnda+0x14>
     fb0:	00 00       	nop
     fb2:	1d 98       	cbi	0x03, 5	; 3
     fb4:	08 95       	ret

00000fb6 <datal>:
     fb6:	1d 9a       	sbi	0x03, 5	; 3
     fb8:	91 e3       	ldi	r25, 0x31	; 49
     fba:	9a 95       	dec	r25
     fbc:	f1 f7       	brne	.-4      	; 0xfba <datal+0x4>
     fbe:	00 00       	nop
     fc0:	1c 9a       	sbi	0x03, 4	; 3
     fc2:	1e 98       	cbi	0x03, 6	; 3
     fc4:	1f 9a       	sbi	0x03, 7	; 3
     fc6:	8b bb       	out	0x1b, r24	; 27
     fc8:	81 e3       	ldi	r24, 0x31	; 49
     fca:	8a 95       	dec	r24
     fcc:	f1 f7       	brne	.-4      	; 0xfca <datal+0x14>
     fce:	00 00       	nop
     fd0:	1d 98       	cbi	0x03, 5	; 3
     fd2:	08 95       	ret

00000fd4 <datar>:
     fd4:	1d 9a       	sbi	0x03, 5	; 3
     fd6:	91 e3       	ldi	r25, 0x31	; 49
     fd8:	9a 95       	dec	r25
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <datar+0x4>
     fdc:	00 00       	nop
     fde:	1c 9a       	sbi	0x03, 4	; 3
     fe0:	1e 9a       	sbi	0x03, 6	; 3
     fe2:	1f 98       	cbi	0x03, 7	; 3
     fe4:	8b bb       	out	0x1b, r24	; 27
     fe6:	81 e3       	ldi	r24, 0x31	; 49
     fe8:	8a 95       	dec	r24
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <datar+0x14>
     fec:	00 00       	nop
     fee:	1d 98       	cbi	0x03, 5	; 3
     ff0:	08 95       	ret

00000ff2 <dataa>:
     ff2:	1d 9a       	sbi	0x03, 5	; 3
     ff4:	91 e3       	ldi	r25, 0x31	; 49
     ff6:	9a 95       	dec	r25
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <dataa+0x4>
     ffa:	00 00       	nop
     ffc:	1c 9a       	sbi	0x03, 4	; 3
     ffe:	1e 9a       	sbi	0x03, 6	; 3
    1000:	1f 9a       	sbi	0x03, 7	; 3
    1002:	8b bb       	out	0x1b, r24	; 27
    1004:	81 e3       	ldi	r24, 0x31	; 49
    1006:	8a 95       	dec	r24
    1008:	f1 f7       	brne	.-4      	; 0x1006 <dataa+0x14>
    100a:	00 00       	nop
    100c:	1d 98       	cbi	0x03, 5	; 3
    100e:	08 95       	ret

00001010 <lcd_clear>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	d8 eb       	ldi	r29, 0xB8	; 184
    1016:	8d 2f       	mov	r24, r29
    1018:	bf df       	rcall	.-130    	; 0xf98 <cmnda>
    101a:	80 e4       	ldi	r24, 0x40	; 64
    101c:	bd df       	rcall	.-134    	; 0xf98 <cmnda>
    101e:	c0 e4       	ldi	r28, 0x40	; 64
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	e7 df       	rcall	.-50     	; 0xff2 <dataa>
    1024:	c1 50       	subi	r28, 0x01	; 1
    1026:	e1 f7       	brne	.-8      	; 0x1020 <lcd_clear+0x10>
    1028:	df 5f       	subi	r29, 0xFF	; 255
    102a:	d0 3c       	cpi	r29, 0xC0	; 192
    102c:	a1 f7       	brne	.-24     	; 0x1016 <lcd_clear+0x6>
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <lcd_init>:
    1034:	8f e3       	ldi	r24, 0x3F	; 63
    1036:	b0 df       	rcall	.-160    	; 0xf98 <cmnda>
    1038:	80 ec       	ldi	r24, 0xC0	; 192
    103a:	ae df       	rcall	.-164    	; 0xf98 <cmnda>
    103c:	88 eb       	ldi	r24, 0xB8	; 184
    103e:	ac df       	rcall	.-168    	; 0xf98 <cmnda>
    1040:	80 e4       	ldi	r24, 0x40	; 64
    1042:	aa cf       	rjmp	.-172    	; 0xf98 <cmnda>
    1044:	08 95       	ret

00001046 <lcd_xy>:
    1046:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <xchar>
    104a:	60 93 6a 0c 	sts	0x0C6A, r22	; 0x800c6a <ychar>
    104e:	88 54       	subi	r24, 0x48	; 72
    1050:	a3 df       	rcall	.-186    	; 0xf98 <cmnda>
    1052:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <ychar>
    1056:	8a 30       	cpi	r24, 0x0A	; 10
    1058:	38 f4       	brcc	.+14     	; 0x1068 <lcd_xy+0x22>
    105a:	98 2f       	mov	r25, r24
    105c:	99 0f       	add	r25, r25
    105e:	89 0f       	add	r24, r25
    1060:	88 0f       	add	r24, r24
    1062:	8c 5b       	subi	r24, 0xBC	; 188
    1064:	7b cf       	rjmp	.-266    	; 0xf5c <cmndl>
    1066:	08 95       	ret
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0a 97       	sbiw	r24, 0x0a	; 10
    106c:	98 2f       	mov	r25, r24
    106e:	99 0f       	add	r25, r25
    1070:	89 0f       	add	r24, r25
    1072:	88 0f       	add	r24, r24
    1074:	80 5c       	subi	r24, 0xC0	; 192
    1076:	81 cf       	rjmp	.-254    	; 0xf7a <cmndr>
    1078:	08 95       	ret

0000107a <lcd_char>:
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	ec 01       	movw	r28, r24
    1084:	cc 0f       	add	r28, r28
    1086:	dd 1f       	adc	r29, r29
    1088:	cc 0f       	add	r28, r28
    108a:	dd 1f       	adc	r29, r29
    108c:	8c 0f       	add	r24, r28
    108e:	9d 1f       	adc	r25, r29
    1090:	ec 01       	movw	r28, r24
    1092:	c4 5e       	subi	r28, 0xE4	; 228
    1094:	dc 4f       	sbci	r29, 0xFC	; 252
    1096:	15 e0       	ldi	r17, 0x05	; 5
    1098:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <ychar>
    109c:	8a 30       	cpi	r24, 0x0A	; 10
    109e:	18 f4       	brcc	.+6      	; 0x10a6 <lcd_char+0x2c>
    10a0:	88 81       	ld	r24, Y
    10a2:	89 df       	rcall	.-238    	; 0xfb6 <datal>
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <lcd_char+0x30>
    10a6:	88 81       	ld	r24, Y
    10a8:	95 df       	rcall	.-214    	; 0xfd4 <datar>
    10aa:	11 50       	subi	r17, 0x01	; 1
    10ac:	21 96       	adiw	r28, 0x01	; 1
    10ae:	11 11       	cpse	r17, r1
    10b0:	f3 cf       	rjmp	.-26     	; 0x1098 <lcd_char+0x1e>
    10b2:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <ychar>
    10b6:	8a 30       	cpi	r24, 0x0A	; 10
    10b8:	18 f4       	brcc	.+6      	; 0x10c0 <lcd_char+0x46>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	7c df       	rcall	.-264    	; 0xfb6 <datal>
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <lcd_char+0x4a>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	88 df       	rcall	.-240    	; 0xfd4 <datar>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	08 95       	ret

000010cc <lcd_string>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ea 01       	movw	r28, r20
    10d2:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <xchar>
    10d6:	60 93 6a 0c 	sts	0x0C6A, r22	; 0x800c6a <ychar>
    10da:	b5 df       	rcall	.-150    	; 0x1046 <lcd_xy>
    10dc:	88 81       	ld	r24, Y
    10de:	88 23       	and	r24, r24
    10e0:	81 f0       	breq	.+32     	; 0x1102 <__stack+0x3>
    10e2:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <ychar>
    10e6:	8a 30       	cpi	r24, 0x0A	; 10
    10e8:	11 f4       	brne	.+4      	; 0x10ee <lcd_string+0x22>
    10ea:	80 e4       	ldi	r24, 0x40	; 64
    10ec:	46 df       	rcall	.-372    	; 0xf7a <cmndr>
    10ee:	89 91       	ld	r24, Y+
    10f0:	c4 df       	rcall	.-120    	; 0x107a <lcd_char>
    10f2:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <ychar>
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	80 93 6a 0c 	sts	0x0C6A, r24	; 0x800c6a <ychar>
    10fc:	88 81       	ld	r24, Y
    10fe:	81 11       	cpse	r24, r1
    1100:	f0 cf       	rjmp	.-32     	; 0x10e2 <lcd_string+0x16>
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <GLCD_Axis_xy>:
    1108:	cf 93       	push	r28
    110a:	c6 2f       	mov	r28, r22
    110c:	88 54       	subi	r24, 0x48	; 72
    110e:	44 df       	rcall	.-376    	; 0xf98 <cmnda>
    1110:	c0 34       	cpi	r28, 0x40	; 64
    1112:	20 f4       	brcc	.+8      	; 0x111c <GLCD_Axis_xy+0x14>
    1114:	80 e4       	ldi	r24, 0x40	; 64
    1116:	8c 0f       	add	r24, r28
    1118:	21 df       	rcall	.-446    	; 0xf5c <cmndl>
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GLCD_Axis_xy+0x18>
    111c:	8c 2f       	mov	r24, r28
    111e:	2d df       	rcall	.-422    	; 0xf7a <cmndr>
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <GLCD_Dot>:
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	80 34       	cpi	r24, 0x40	; 64
    1130:	08 f0       	brcs	.+2      	; 0x1134 <GLCD_Dot+0x10>
    1132:	54 c0       	rjmp	.+168    	; 0x11dc <GLCD_Dot+0xb8>
    1134:	66 23       	and	r22, r22
    1136:	0c f4       	brge	.+2      	; 0x113a <GLCD_Dot+0x16>
    1138:	51 c0       	rjmp	.+162    	; 0x11dc <GLCD_Dot+0xb8>
    113a:	28 2f       	mov	r18, r24
    113c:	26 95       	lsr	r18
    113e:	26 95       	lsr	r18
    1140:	26 95       	lsr	r18
    1142:	98 2f       	mov	r25, r24
    1144:	97 70       	andi	r25, 0x07	; 7
    1146:	71 f0       	breq	.+28     	; 0x1164 <GLCD_Dot+0x40>
    1148:	91 30       	cpi	r25, 0x01	; 1
    114a:	71 f0       	breq	.+28     	; 0x1168 <GLCD_Dot+0x44>
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	71 f0       	breq	.+28     	; 0x116c <GLCD_Dot+0x48>
    1150:	93 30       	cpi	r25, 0x03	; 3
    1152:	71 f0       	breq	.+28     	; 0x1170 <GLCD_Dot+0x4c>
    1154:	94 30       	cpi	r25, 0x04	; 4
    1156:	71 f0       	breq	.+28     	; 0x1174 <GLCD_Dot+0x50>
    1158:	95 30       	cpi	r25, 0x05	; 5
    115a:	71 f0       	breq	.+28     	; 0x1178 <GLCD_Dot+0x54>
    115c:	96 30       	cpi	r25, 0x06	; 6
    115e:	71 f0       	breq	.+28     	; 0x117c <GLCD_Dot+0x58>
    1160:	90 e8       	ldi	r25, 0x80	; 128
    1162:	0d c0       	rjmp	.+26     	; 0x117e <GLCD_Dot+0x5a>
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0b c0       	rjmp	.+22     	; 0x117e <GLCD_Dot+0x5a>
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	09 c0       	rjmp	.+18     	; 0x117e <GLCD_Dot+0x5a>
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	07 c0       	rjmp	.+14     	; 0x117e <GLCD_Dot+0x5a>
    1170:	98 e0       	ldi	r25, 0x08	; 8
    1172:	05 c0       	rjmp	.+10     	; 0x117e <GLCD_Dot+0x5a>
    1174:	90 e1       	ldi	r25, 0x10	; 16
    1176:	03 c0       	rjmp	.+6      	; 0x117e <GLCD_Dot+0x5a>
    1178:	90 e2       	ldi	r25, 0x20	; 32
    117a:	01 c0       	rjmp	.+2      	; 0x117e <GLCD_Dot+0x5a>
    117c:	90 e4       	ldi	r25, 0x40	; 64
    117e:	c6 2f       	mov	r28, r22
    1180:	02 2f       	mov	r16, r18
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	e6 2e       	mov	r14, r22
    1186:	f1 2c       	mov	r15, r1
    1188:	f8 01       	movw	r30, r16
    118a:	f6 95       	lsr	r31
    118c:	fe 2f       	mov	r31, r30
    118e:	ee 27       	eor	r30, r30
    1190:	f7 95       	ror	r31
    1192:	e7 95       	ror	r30
    1194:	e6 59       	subi	r30, 0x96	; 150
    1196:	f7 4f       	sbci	r31, 0xF7	; 247
    1198:	ee 0d       	add	r30, r14
    119a:	ff 1d       	adc	r31, r15
    119c:	80 81       	ld	r24, Z
    119e:	98 2b       	or	r25, r24
    11a0:	90 83       	st	Z, r25
    11a2:	82 2f       	mov	r24, r18
    11a4:	b1 df       	rcall	.-158    	; 0x1108 <GLCD_Axis_xy>
    11a6:	c0 34       	cpi	r28, 0x40	; 64
    11a8:	68 f4       	brcc	.+26     	; 0x11c4 <GLCD_Dot+0xa0>
    11aa:	16 95       	lsr	r17
    11ac:	10 2f       	mov	r17, r16
    11ae:	00 27       	eor	r16, r16
    11b0:	17 95       	ror	r17
    11b2:	07 95       	ror	r16
    11b4:	06 59       	subi	r16, 0x96	; 150
    11b6:	17 4f       	sbci	r17, 0xF7	; 247
    11b8:	f8 01       	movw	r30, r16
    11ba:	ee 0d       	add	r30, r14
    11bc:	ff 1d       	adc	r31, r15
    11be:	80 81       	ld	r24, Z
    11c0:	fa de       	rcall	.-524    	; 0xfb6 <datal>
    11c2:	0c c0       	rjmp	.+24     	; 0x11dc <GLCD_Dot+0xb8>
    11c4:	16 95       	lsr	r17
    11c6:	10 2f       	mov	r17, r16
    11c8:	00 27       	eor	r16, r16
    11ca:	17 95       	ror	r17
    11cc:	07 95       	ror	r16
    11ce:	06 59       	subi	r16, 0x96	; 150
    11d0:	17 4f       	sbci	r17, 0xF7	; 247
    11d2:	f8 01       	movw	r30, r16
    11d4:	ee 0d       	add	r30, r14
    11d6:	ff 1d       	adc	r31, r15
    11d8:	80 81       	ld	r24, Z
    11da:	fc de       	rcall	.-520    	; 0xfd4 <datar>
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	08 95       	ret

000011e8 <ScreenBuffer_clear>:
    11e8:	ea e6       	ldi	r30, 0x6A	; 106
    11ea:	f8 e0       	ldi	r31, 0x08	; 8
    11ec:	2a e6       	ldi	r18, 0x6A	; 106
    11ee:	3c e0       	ldi	r19, 0x0C	; 12
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <ScreenBuffer_clear+0x1a>
    11f2:	11 92       	st	Z+, r1
    11f4:	e8 17       	cp	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <ScreenBuffer_clear+0xa>
    11fa:	fc 01       	movw	r30, r24
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	21 f0       	breq	.+8      	; 0x120a <ScreenBuffer_clear+0x22>
    1202:	cf 01       	movw	r24, r30
    1204:	80 58       	subi	r24, 0x80	; 128
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	f4 cf       	rjmp	.-24     	; 0x11f2 <ScreenBuffer_clear+0xa>
    120a:	08 95       	ret

0000120c <GLCD_Rectangle_black>:
    120c:	bf 92       	push	r11
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	08 2f       	mov	r16, r24
    1220:	10 e0       	ldi	r17, 0x00	; 0
    1222:	c4 2e       	mov	r12, r20
    1224:	d1 2c       	mov	r13, r1
    1226:	c0 16       	cp	r12, r16
    1228:	d1 06       	cpc	r13, r17
    122a:	a4 f0       	brlt	.+40     	; 0x1254 <GLCD_Rectangle_black+0x48>
    122c:	b6 2e       	mov	r11, r22
    122e:	e2 2e       	mov	r14, r18
    1230:	f1 2c       	mov	r15, r1
    1232:	cb 2d       	mov	r28, r11
    1234:	d0 e0       	ldi	r29, 0x00	; 0
    1236:	ec 16       	cp	r14, r28
    1238:	fd 06       	cpc	r15, r29
    123a:	3c f0       	brlt	.+14     	; 0x124a <GLCD_Rectangle_black+0x3e>
    123c:	6c 2f       	mov	r22, r28
    123e:	80 2f       	mov	r24, r16
    1240:	71 df       	rcall	.-286    	; 0x1124 <GLCD_Dot>
    1242:	21 96       	adiw	r28, 0x01	; 1
    1244:	ec 16       	cp	r14, r28
    1246:	fd 06       	cpc	r15, r29
    1248:	cc f7       	brge	.-14     	; 0x123c <GLCD_Rectangle_black+0x30>
    124a:	0f 5f       	subi	r16, 0xFF	; 255
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	c0 16       	cp	r12, r16
    1250:	d1 06       	cpc	r13, r17
    1252:	7c f7       	brge	.-34     	; 0x1232 <GLCD_Rectangle_black+0x26>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	08 95       	ret

00001268 <GLCD_Circle_black>:
	
	//게임 프로그램의 그림 구현("보고서_3.3.4 기타 기능 구현" 참조)
	// draw a circle
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
    1268:	2f 92       	push	r2
    126a:	3f 92       	push	r3
    126c:	4f 92       	push	r4
    126e:	5f 92       	push	r5
    1270:	6f 92       	push	r6
    1272:	7f 92       	push	r7
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	29 97       	sbiw	r28, 0x09	; 9
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	8f 83       	std	Y+7, r24	; 0x07
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
    129e:	c6 2e       	mov	r12, r22
    12a0:	d1 2c       	mov	r13, r1
    12a2:	24 2f       	mov	r18, r20
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	2b 83       	std	Y+3, r18	; 0x03
    12aa:	59 01       	movw	r10, r18
    12ac:	aa 0c       	add	r10, r10
    12ae:	bb 1c       	adc	r11, r11
    12b0:	a2 0e       	add	r10, r18
    12b2:	b3 1e       	adc	r11, r19
    12b4:	c5 01       	movw	r24, r10
    12b6:	95 95       	asr	r25
    12b8:	87 95       	ror	r24
    12ba:	95 95       	asr	r25
    12bc:	87 95       	ror	r24
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	76 01       	movw	r14, r12
    12c4:	e8 1a       	sub	r14, r24
    12c6:	f9 0a       	sbc	r15, r25
    12c8:	4c 01       	movw	r8, r24
    12ca:	8c 0c       	add	r8, r12
    12cc:	9d 1c       	adc	r9, r13
    12ce:	8e 14       	cp	r8, r14
    12d0:	9f 04       	cpc	r9, r15
    12d2:	0c f4       	brge	.+2      	; 0x12d6 <GLCD_Circle_black+0x6e>
    12d4:	47 c0       	rjmp	.+142    	; 0x1364 <GLCD_Circle_black+0xfc>
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
    12d6:	22 9f       	mul	r18, r18
    12d8:	10 01       	movw	r2, r0
    12da:	23 9f       	mul	r18, r19
    12dc:	30 0c       	add	r3, r0
    12de:	30 0c       	add	r3, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	96 01       	movw	r18, r12
    12e4:	3a 83       	std	Y+2, r19	; 0x02
    12e6:	29 83       	std	Y+1, r18	; 0x01
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
    12e8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ea:	a3 2e       	mov	r10, r19
    12ec:	b1 2c       	mov	r11, r1
    12ee:	c7 01       	movw	r24, r14
    12f0:	29 81       	ldd	r18, Y+1	; 0x01
    12f2:	3a 81       	ldd	r19, Y+2	; 0x02
    12f4:	82 1b       	sub	r24, r18
    12f6:	93 0b       	sbc	r25, r19
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
    12f8:	88 9f       	mul	r24, r24
    12fa:	90 01       	movw	r18, r0
    12fc:	89 9f       	mul	r24, r25
    12fe:	30 0d       	add	r19, r0
    1300:	30 0d       	add	r19, r0
    1302:	11 24       	eor	r1, r1
    1304:	21 01       	movw	r4, r2
    1306:	42 1a       	sub	r4, r18
    1308:	53 0a       	sbc	r5, r19
    130a:	05 2c       	mov	r0, r5
    130c:	00 0c       	add	r0, r0
    130e:	66 08       	sbc	r6, r6
    1310:	77 08       	sbc	r7, r7
    1312:	c3 01       	movw	r24, r6
    1314:	b2 01       	movw	r22, r4
    1316:	22 d1       	rcall	.+580    	; 0x155c <__floatsisf>
    1318:	b1 d1       	rcall	.+866    	; 0x167c <sqrt>
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	8a d0       	rcall	.+276    	; 0x1438 <__addsf3>
    1324:	ed d0       	rcall	.+474    	; 0x1500 <__fixunssfsi>
    1326:	06 2f       	mov	r16, r22
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	c5 01       	movw	r24, r10
    132c:	80 1b       	sub	r24, r16
    132e:	91 0b       	sbc	r25, r17
    1330:	99 87       	std	Y+9, r25	; 0x09
    1332:	88 87       	std	Y+8, r24	; 0x08
    1334:	0a 0d       	add	r16, r10
    1336:	1b 1d       	adc	r17, r11
    1338:	08 17       	cp	r16, r24
    133a:	19 07       	cpc	r17, r25
    133c:	64 f0       	brlt	.+24     	; 0x1356 <GLCD_Circle_black+0xee>
				GLCD_Dot(x,y);
    133e:	6e 2d       	mov	r22, r14
    1340:	88 85       	ldd	r24, Y+8	; 0x08
    1342:	f0 de       	rcall	.-544    	; 0x1124 <GLCD_Dot>
    1344:	28 85       	ldd	r18, Y+8	; 0x08
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
    1346:	39 85       	ldd	r19, Y+9	; 0x09
    1348:	2f 5f       	subi	r18, 0xFF	; 255
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	39 87       	std	Y+9, r19	; 0x09
    134e:	28 87       	std	Y+8, r18	; 0x08
    1350:	02 17       	cp	r16, r18
    1352:	13 07       	cpc	r17, r19
    1354:	a4 f7       	brge	.-24     	; 0x133e <GLCD_Circle_black+0xd6>
    1356:	3f ef       	ldi	r19, 0xFF	; 255
	// draw a circle
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
    1358:	e3 1a       	sub	r14, r19
    135a:	f3 0a       	sbc	r15, r19
    135c:	8e 14       	cp	r8, r14
    135e:	9f 04       	cpc	r9, r15
    1360:	0c f0       	brlt	.+2      	; 0x1364 <GLCD_Circle_black+0xfc>
    1362:	c5 cf       	rjmp	.-118    	; 0x12ee <GLCD_Circle_black+0x86>
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
    1366:	a8 2e       	mov	r10, r24
    1368:	b1 2c       	mov	r11, r1
    136a:	75 01       	movw	r14, r10
    136c:	2d 81       	ldd	r18, Y+5	; 0x05
    136e:	3e 81       	ldd	r19, Y+6	; 0x06
    1370:	e2 1a       	sub	r14, r18
    1372:	f3 0a       	sbc	r15, r19
    1374:	a2 0e       	add	r10, r18
    1376:	b3 1e       	adc	r11, r19
    1378:	ae 14       	cp	r10, r14
    137a:	bf 04       	cpc	r11, r15
    137c:	0c f4       	brge	.+2      	; 0x1380 <GLCD_Circle_black+0x118>
    137e:	42 c0       	rjmp	.+132    	; 0x1404 <GLCD_Circle_black+0x19c>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	88 9f       	mul	r24, r24
    1386:	40 01       	movw	r8, r0
    1388:	89 9f       	mul	r24, r25
    138a:	90 0c       	add	r9, r0
    138c:	90 0c       	add	r9, r0
    138e:	11 24       	eor	r1, r1
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	29 2e       	mov	r2, r25
    1394:	31 2c       	mov	r3, r1
    1396:	c7 01       	movw	r24, r14
    1398:	82 19       	sub	r24, r2
    139a:	93 09       	sbc	r25, r3
    139c:	88 9f       	mul	r24, r24
    139e:	90 01       	movw	r18, r0
    13a0:	89 9f       	mul	r24, r25
    13a2:	30 0d       	add	r19, r0
    13a4:	30 0d       	add	r19, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	24 01       	movw	r4, r8
    13aa:	42 1a       	sub	r4, r18
    13ac:	53 0a       	sbc	r5, r19
    13ae:	05 2c       	mov	r0, r5
    13b0:	00 0c       	add	r0, r0
    13b2:	66 08       	sbc	r6, r6
    13b4:	77 08       	sbc	r7, r7
    13b6:	c3 01       	movw	r24, r6
    13b8:	b2 01       	movw	r22, r4
    13ba:	d0 d0       	rcall	.+416    	; 0x155c <__floatsisf>
    13bc:	5f d1       	rcall	.+702    	; 0x167c <sqrt>
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	38 d0       	rcall	.+112    	; 0x1438 <__addsf3>
    13c8:	9b d0       	rcall	.+310    	; 0x1500 <__fixunssfsi>
    13ca:	06 2f       	mov	r16, r22
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	96 01       	movw	r18, r12
    13d0:	20 1b       	sub	r18, r16
    13d2:	31 0b       	sbc	r19, r17
    13d4:	3a 83       	std	Y+2, r19	; 0x02
    13d6:	29 83       	std	Y+1, r18	; 0x01
    13d8:	0c 0d       	add	r16, r12
    13da:	1d 1d       	adc	r17, r13
    13dc:	02 17       	cp	r16, r18
    13de:	13 07       	cpc	r17, r19
    13e0:	5c f0       	brlt	.+22     	; 0x13f8 <GLCD_Circle_black+0x190>
    13e2:	69 81       	ldd	r22, Y+1	; 0x01
				GLCD_Dot(x,y);
    13e4:	8e 2d       	mov	r24, r14
    13e6:	9e de       	rcall	.-708    	; 0x1124 <GLCD_Dot>
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	08 17       	cp	r16, r24
    13f4:	19 07       	cpc	r17, r25
    13f6:	ac f7       	brge	.-22     	; 0x13e2 <GLCD_Circle_black+0x17a>
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	e9 1a       	sub	r14, r25
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
    13fc:	f9 0a       	sbc	r15, r25
    13fe:	ae 14       	cp	r10, r14
    1400:	bf 04       	cpc	r11, r15
    1402:	4c f6       	brge	.-110    	; 0x1396 <GLCD_Circle_black+0x12e>
    1404:	29 96       	adiw	r28, 0x09	; 9
    1406:	0f b6       	in	r0, 0x3f	; 63
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
				GLCD_Dot(x,y);
			}
		}
	}
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	7f 90       	pop	r7
    142a:	6f 90       	pop	r6
    142c:	5f 90       	pop	r5
    142e:	4f 90       	pop	r4
    1430:	3f 90       	pop	r3
    1432:	2f 90       	pop	r2
    1434:	08 95       	ret

00001436 <__subsf3>:
    1436:	50 58       	subi	r21, 0x80	; 128

00001438 <__addsf3>:
    1438:	bb 27       	eor	r27, r27
    143a:	aa 27       	eor	r26, r26
    143c:	0e d0       	rcall	.+28     	; 0x145a <__addsf3x>
    143e:	e0 c0       	rjmp	.+448    	; 0x1600 <__fp_round>
    1440:	d1 d0       	rcall	.+418    	; 0x15e4 <__fp_pscA>
    1442:	30 f0       	brcs	.+12     	; 0x1450 <__addsf3+0x18>
    1444:	d6 d0       	rcall	.+428    	; 0x15f2 <__fp_pscB>
    1446:	20 f0       	brcs	.+8      	; 0x1450 <__addsf3+0x18>
    1448:	31 f4       	brne	.+12     	; 0x1456 <__addsf3+0x1e>
    144a:	9f 3f       	cpi	r25, 0xFF	; 255
    144c:	11 f4       	brne	.+4      	; 0x1452 <__addsf3+0x1a>
    144e:	1e f4       	brtc	.+6      	; 0x1456 <__addsf3+0x1e>
    1450:	c6 c0       	rjmp	.+396    	; 0x15de <__fp_nan>
    1452:	0e f4       	brtc	.+2      	; 0x1456 <__addsf3+0x1e>
    1454:	e0 95       	com	r30
    1456:	e7 fb       	bst	r30, 7
    1458:	bc c0       	rjmp	.+376    	; 0x15d2 <__fp_inf>

0000145a <__addsf3x>:
    145a:	e9 2f       	mov	r30, r25
    145c:	e2 d0       	rcall	.+452    	; 0x1622 <__fp_split3>
    145e:	80 f3       	brcs	.-32     	; 0x1440 <__addsf3+0x8>
    1460:	ba 17       	cp	r27, r26
    1462:	62 07       	cpc	r22, r18
    1464:	73 07       	cpc	r23, r19
    1466:	84 07       	cpc	r24, r20
    1468:	95 07       	cpc	r25, r21
    146a:	18 f0       	brcs	.+6      	; 0x1472 <__addsf3x+0x18>
    146c:	71 f4       	brne	.+28     	; 0x148a <__addsf3x+0x30>
    146e:	9e f5       	brtc	.+102    	; 0x14d6 <__addsf3x+0x7c>
    1470:	fa c0       	rjmp	.+500    	; 0x1666 <__fp_zero>
    1472:	0e f4       	brtc	.+2      	; 0x1476 <__addsf3x+0x1c>
    1474:	e0 95       	com	r30
    1476:	0b 2e       	mov	r0, r27
    1478:	ba 2f       	mov	r27, r26
    147a:	a0 2d       	mov	r26, r0
    147c:	0b 01       	movw	r0, r22
    147e:	b9 01       	movw	r22, r18
    1480:	90 01       	movw	r18, r0
    1482:	0c 01       	movw	r0, r24
    1484:	ca 01       	movw	r24, r20
    1486:	a0 01       	movw	r20, r0
    1488:	11 24       	eor	r1, r1
    148a:	ff 27       	eor	r31, r31
    148c:	59 1b       	sub	r21, r25
    148e:	99 f0       	breq	.+38     	; 0x14b6 <__addsf3x+0x5c>
    1490:	59 3f       	cpi	r21, 0xF9	; 249
    1492:	50 f4       	brcc	.+20     	; 0x14a8 <__addsf3x+0x4e>
    1494:	50 3e       	cpi	r21, 0xE0	; 224
    1496:	68 f1       	brcs	.+90     	; 0x14f2 <__addsf3x+0x98>
    1498:	1a 16       	cp	r1, r26
    149a:	f0 40       	sbci	r31, 0x00	; 0
    149c:	a2 2f       	mov	r26, r18
    149e:	23 2f       	mov	r18, r19
    14a0:	34 2f       	mov	r19, r20
    14a2:	44 27       	eor	r20, r20
    14a4:	58 5f       	subi	r21, 0xF8	; 248
    14a6:	f3 cf       	rjmp	.-26     	; 0x148e <__addsf3x+0x34>
    14a8:	46 95       	lsr	r20
    14aa:	37 95       	ror	r19
    14ac:	27 95       	ror	r18
    14ae:	a7 95       	ror	r26
    14b0:	f0 40       	sbci	r31, 0x00	; 0
    14b2:	53 95       	inc	r21
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__addsf3x+0x4e>
    14b6:	7e f4       	brtc	.+30     	; 0x14d6 <__addsf3x+0x7c>
    14b8:	1f 16       	cp	r1, r31
    14ba:	ba 0b       	sbc	r27, r26
    14bc:	62 0b       	sbc	r22, r18
    14be:	73 0b       	sbc	r23, r19
    14c0:	84 0b       	sbc	r24, r20
    14c2:	ba f0       	brmi	.+46     	; 0x14f2 <__addsf3x+0x98>
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	a1 f0       	breq	.+40     	; 0x14f0 <__addsf3x+0x96>
    14c8:	ff 0f       	add	r31, r31
    14ca:	bb 1f       	adc	r27, r27
    14cc:	66 1f       	adc	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	c2 f7       	brpl	.-16     	; 0x14c4 <__addsf3x+0x6a>
    14d4:	0e c0       	rjmp	.+28     	; 0x14f2 <__addsf3x+0x98>
    14d6:	ba 0f       	add	r27, r26
    14d8:	62 1f       	adc	r22, r18
    14da:	73 1f       	adc	r23, r19
    14dc:	84 1f       	adc	r24, r20
    14de:	48 f4       	brcc	.+18     	; 0x14f2 <__addsf3x+0x98>
    14e0:	87 95       	ror	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	9e 3f       	cpi	r25, 0xFE	; 254
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <__addsf3x+0x96>
    14ee:	b3 cf       	rjmp	.-154    	; 0x1456 <__addsf3+0x1e>
    14f0:	93 95       	inc	r25
    14f2:	88 0f       	add	r24, r24
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <__addsf3x+0x9e>
    14f6:	99 27       	eor	r25, r25
    14f8:	ee 0f       	add	r30, r30
    14fa:	97 95       	ror	r25
    14fc:	87 95       	ror	r24
    14fe:	08 95       	ret

00001500 <__fixunssfsi>:
    1500:	98 d0       	rcall	.+304    	; 0x1632 <__fp_splitA>
    1502:	88 f0       	brcs	.+34     	; 0x1526 <__fixunssfsi+0x26>
    1504:	9f 57       	subi	r25, 0x7F	; 127
    1506:	90 f0       	brcs	.+36     	; 0x152c <__fixunssfsi+0x2c>
    1508:	b9 2f       	mov	r27, r25
    150a:	99 27       	eor	r25, r25
    150c:	b7 51       	subi	r27, 0x17	; 23
    150e:	a0 f0       	brcs	.+40     	; 0x1538 <__fixunssfsi+0x38>
    1510:	d1 f0       	breq	.+52     	; 0x1546 <__fixunssfsi+0x46>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	1a f0       	brmi	.+6      	; 0x1522 <__fixunssfsi+0x22>
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__fixunssfsi+0x12>
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <__fixunssfsi+0x46>
    1522:	b1 30       	cpi	r27, 0x01	; 1
    1524:	81 f0       	breq	.+32     	; 0x1546 <__fixunssfsi+0x46>
    1526:	9f d0       	rcall	.+318    	; 0x1666 <__fp_zero>
    1528:	b1 e0       	ldi	r27, 0x01	; 1
    152a:	08 95       	ret
    152c:	9c c0       	rjmp	.+312    	; 0x1666 <__fp_zero>
    152e:	67 2f       	mov	r22, r23
    1530:	78 2f       	mov	r23, r24
    1532:	88 27       	eor	r24, r24
    1534:	b8 5f       	subi	r27, 0xF8	; 248
    1536:	39 f0       	breq	.+14     	; 0x1546 <__fixunssfsi+0x46>
    1538:	b9 3f       	cpi	r27, 0xF9	; 249
    153a:	cc f3       	brlt	.-14     	; 0x152e <__fixunssfsi+0x2e>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b3 95       	inc	r27
    1544:	d9 f7       	brne	.-10     	; 0x153c <__fixunssfsi+0x3c>
    1546:	3e f4       	brtc	.+14     	; 0x1556 <__fixunssfsi+0x56>
    1548:	90 95       	com	r25
    154a:	80 95       	com	r24
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__floatunsisf>:
    1558:	e8 94       	clt
    155a:	09 c0       	rjmp	.+18     	; 0x156e <__floatsisf+0x12>

0000155c <__floatsisf>:
    155c:	97 fb       	bst	r25, 7
    155e:	3e f4       	brtc	.+14     	; 0x156e <__floatsisf+0x12>
    1560:	90 95       	com	r25
    1562:	80 95       	com	r24
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	99 23       	and	r25, r25
    1570:	a9 f0       	breq	.+42     	; 0x159c <__floatsisf+0x40>
    1572:	f9 2f       	mov	r31, r25
    1574:	96 e9       	ldi	r25, 0x96	; 150
    1576:	bb 27       	eor	r27, r27
    1578:	93 95       	inc	r25
    157a:	f6 95       	lsr	r31
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	f1 11       	cpse	r31, r1
    1586:	f8 cf       	rjmp	.-16     	; 0x1578 <__floatsisf+0x1c>
    1588:	fa f4       	brpl	.+62     	; 0x15c8 <__floatsisf+0x6c>
    158a:	bb 0f       	add	r27, r27
    158c:	11 f4       	brne	.+4      	; 0x1592 <__floatsisf+0x36>
    158e:	60 ff       	sbrs	r22, 0
    1590:	1b c0       	rjmp	.+54     	; 0x15c8 <__floatsisf+0x6c>
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <__floatsisf+0x6c>
    159c:	88 23       	and	r24, r24
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__floatsisf+0x48>
    15a0:	96 e9       	ldi	r25, 0x96	; 150
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <__floatsisf+0x6a>
    15a4:	77 23       	and	r23, r23
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <__floatsisf+0x54>
    15a8:	9e e8       	ldi	r25, 0x8E	; 142
    15aa:	87 2f       	mov	r24, r23
    15ac:	76 2f       	mov	r23, r22
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <__floatsisf+0x5e>
    15b0:	66 23       	and	r22, r22
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <__floatsisf+0x74>
    15b4:	96 e8       	ldi	r25, 0x86	; 134
    15b6:	86 2f       	mov	r24, r22
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	2a f0       	brmi	.+10     	; 0x15c8 <__floatsisf+0x6c>
    15be:	9a 95       	dec	r25
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	da f7       	brpl	.-10     	; 0x15be <__floatsisf+0x62>
    15c8:	88 0f       	add	r24, r24
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	97 f9       	bld	r25, 7
    15d0:	08 95       	ret

000015d2 <__fp_inf>:
    15d2:	97 f9       	bld	r25, 7
    15d4:	9f 67       	ori	r25, 0x7F	; 127
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	08 95       	ret

000015de <__fp_nan>:
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	80 ec       	ldi	r24, 0xC0	; 192
    15e2:	08 95       	ret

000015e4 <__fp_pscA>:
    15e4:	00 24       	eor	r0, r0
    15e6:	0a 94       	dec	r0
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	18 06       	cpc	r1, r24
    15ee:	09 06       	cpc	r0, r25
    15f0:	08 95       	ret

000015f2 <__fp_pscB>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	05 06       	cpc	r0, r21
    15fe:	08 95       	ret

00001600 <__fp_round>:
    1600:	09 2e       	mov	r0, r25
    1602:	03 94       	inc	r0
    1604:	00 0c       	add	r0, r0
    1606:	11 f4       	brne	.+4      	; 0x160c <__fp_round+0xc>
    1608:	88 23       	and	r24, r24
    160a:	52 f0       	brmi	.+20     	; 0x1620 <__fp_round+0x20>
    160c:	bb 0f       	add	r27, r27
    160e:	40 f4       	brcc	.+16     	; 0x1620 <__fp_round+0x20>
    1610:	bf 2b       	or	r27, r31
    1612:	11 f4       	brne	.+4      	; 0x1618 <__fp_round+0x18>
    1614:	60 ff       	sbrs	r22, 0
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__fp_round+0x20>
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__fp_split3>:
    1622:	57 fd       	sbrc	r21, 7
    1624:	90 58       	subi	r25, 0x80	; 128
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	59 f0       	breq	.+22     	; 0x1642 <__fp_splitA+0x10>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	71 f0       	breq	.+28     	; 0x164c <__fp_splitA+0x1a>
    1630:	47 95       	ror	r20

00001632 <__fp_splitA>:
    1632:	88 0f       	add	r24, r24
    1634:	97 fb       	bst	r25, 7
    1636:	99 1f       	adc	r25, r25
    1638:	61 f0       	breq	.+24     	; 0x1652 <__fp_splitA+0x20>
    163a:	9f 3f       	cpi	r25, 0xFF	; 255
    163c:	79 f0       	breq	.+30     	; 0x165c <__fp_splitA+0x2a>
    163e:	87 95       	ror	r24
    1640:	08 95       	ret
    1642:	12 16       	cp	r1, r18
    1644:	13 06       	cpc	r1, r19
    1646:	14 06       	cpc	r1, r20
    1648:	55 1f       	adc	r21, r21
    164a:	f2 cf       	rjmp	.-28     	; 0x1630 <__fp_split3+0xe>
    164c:	46 95       	lsr	r20
    164e:	f1 df       	rcall	.-30     	; 0x1632 <__fp_splitA>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <__fp_splitA+0x30>
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	99 1f       	adc	r25, r25
    165a:	f1 cf       	rjmp	.-30     	; 0x163e <__fp_splitA+0xc>
    165c:	86 95       	lsr	r24
    165e:	71 05       	cpc	r23, r1
    1660:	61 05       	cpc	r22, r1
    1662:	08 94       	sec
    1664:	08 95       	ret

00001666 <__fp_zero>:
    1666:	e8 94       	clt

00001668 <__fp_szero>:
    1668:	bb 27       	eor	r27, r27
    166a:	66 27       	eor	r22, r22
    166c:	77 27       	eor	r23, r23
    166e:	cb 01       	movw	r24, r22
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret
    1674:	11 f4       	brne	.+4      	; 0x167a <__fp_szero+0x12>
    1676:	0e f4       	brtc	.+2      	; 0x167a <__fp_szero+0x12>
    1678:	b2 cf       	rjmp	.-156    	; 0x15de <__fp_nan>
    167a:	3e c0       	rjmp	.+124    	; 0x16f8 <__fp_mpack>

0000167c <sqrt>:
    167c:	da df       	rcall	.-76     	; 0x1632 <__fp_splitA>
    167e:	d0 f3       	brcs	.-12     	; 0x1674 <__fp_szero+0xc>
    1680:	99 23       	and	r25, r25
    1682:	d9 f3       	breq	.-10     	; 0x167a <__fp_szero+0x12>
    1684:	ce f3       	brts	.-14     	; 0x1678 <__fp_szero+0x10>
    1686:	9f 57       	subi	r25, 0x7F	; 127
    1688:	55 0b       	sbc	r21, r21
    168a:	87 ff       	sbrs	r24, 7
    168c:	43 d0       	rcall	.+134    	; 0x1714 <__fp_norm2>
    168e:	00 24       	eor	r0, r0
    1690:	a0 e6       	ldi	r26, 0x60	; 96
    1692:	40 ea       	ldi	r20, 0xA0	; 160
    1694:	90 01       	movw	r18, r0
    1696:	80 58       	subi	r24, 0x80	; 128
    1698:	56 95       	lsr	r21
    169a:	97 95       	ror	r25
    169c:	28 f4       	brcc	.+10     	; 0x16a8 <sqrt+0x2c>
    169e:	80 5c       	subi	r24, 0xC0	; 192
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <sqrt+0x34>
    16a8:	26 17       	cp	r18, r22
    16aa:	37 07       	cpc	r19, r23
    16ac:	48 07       	cpc	r20, r24
    16ae:	30 f4       	brcc	.+12     	; 0x16bc <sqrt+0x40>
    16b0:	62 1b       	sub	r22, r18
    16b2:	73 0b       	sbc	r23, r19
    16b4:	84 0b       	sbc	r24, r20
    16b6:	20 29       	or	r18, r0
    16b8:	31 29       	or	r19, r1
    16ba:	4a 2b       	or	r20, r26
    16bc:	a6 95       	lsr	r26
    16be:	17 94       	ror	r1
    16c0:	07 94       	ror	r0
    16c2:	20 25       	eor	r18, r0
    16c4:	31 25       	eor	r19, r1
    16c6:	4a 27       	eor	r20, r26
    16c8:	58 f7       	brcc	.-42     	; 0x16a0 <sqrt+0x24>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	20 f0       	brcs	.+8      	; 0x16da <sqrt+0x5e>
    16d2:	26 17       	cp	r18, r22
    16d4:	37 07       	cpc	r19, r23
    16d6:	48 07       	cpc	r20, r24
    16d8:	30 f4       	brcc	.+12     	; 0x16e6 <sqrt+0x6a>
    16da:	62 0b       	sbc	r22, r18
    16dc:	73 0b       	sbc	r23, r19
    16de:	84 0b       	sbc	r24, r20
    16e0:	20 0d       	add	r18, r0
    16e2:	31 1d       	adc	r19, r1
    16e4:	41 1d       	adc	r20, r1
    16e6:	a0 95       	com	r26
    16e8:	81 f7       	brne	.-32     	; 0x16ca <sqrt+0x4e>
    16ea:	b9 01       	movw	r22, r18
    16ec:	84 2f       	mov	r24, r20
    16ee:	91 58       	subi	r25, 0x81	; 129
    16f0:	88 0f       	add	r24, r24
    16f2:	96 95       	lsr	r25
    16f4:	87 95       	ror	r24
    16f6:	08 95       	ret

000016f8 <__fp_mpack>:
    16f8:	9f 3f       	cpi	r25, 0xFF	; 255
    16fa:	31 f0       	breq	.+12     	; 0x1708 <__fp_mpack_finite+0xc>

000016fc <__fp_mpack_finite>:
    16fc:	91 50       	subi	r25, 0x01	; 1
    16fe:	20 f4       	brcc	.+8      	; 0x1708 <__fp_mpack_finite+0xc>
    1700:	87 95       	ror	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	b7 95       	ror	r27
    1708:	88 0f       	add	r24, r24
    170a:	91 1d       	adc	r25, r1
    170c:	96 95       	lsr	r25
    170e:	87 95       	ror	r24
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret

00001714 <__fp_norm2>:
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	d2 f7       	brpl	.-12     	; 0x1714 <__fp_norm2>
    1720:	08 95       	ret

00001722 <__udivmodhi4>:
    1722:	aa 1b       	sub	r26, r26
    1724:	bb 1b       	sub	r27, r27
    1726:	51 e1       	ldi	r21, 0x11	; 17
    1728:	07 c0       	rjmp	.+14     	; 0x1738 <__udivmodhi4_ep>

0000172a <__udivmodhi4_loop>:
    172a:	aa 1f       	adc	r26, r26
    172c:	bb 1f       	adc	r27, r27
    172e:	a6 17       	cp	r26, r22
    1730:	b7 07       	cpc	r27, r23
    1732:	10 f0       	brcs	.+4      	; 0x1738 <__udivmodhi4_ep>
    1734:	a6 1b       	sub	r26, r22
    1736:	b7 0b       	sbc	r27, r23

00001738 <__udivmodhi4_ep>:
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	5a 95       	dec	r21
    173e:	a9 f7       	brne	.-22     	; 0x172a <__udivmodhi4_loop>
    1740:	80 95       	com	r24
    1742:	90 95       	com	r25
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	08 95       	ret

0000174a <__divmodhi4>:
    174a:	97 fb       	bst	r25, 7
    174c:	07 2e       	mov	r0, r23
    174e:	16 f4       	brtc	.+4      	; 0x1754 <__divmodhi4+0xa>
    1750:	00 94       	com	r0
    1752:	06 d0       	rcall	.+12     	; 0x1760 <__divmodhi4_neg1>
    1754:	77 fd       	sbrc	r23, 7
    1756:	08 d0       	rcall	.+16     	; 0x1768 <__divmodhi4_neg2>
    1758:	e4 df       	rcall	.-56     	; 0x1722 <__udivmodhi4>
    175a:	07 fc       	sbrc	r0, 7
    175c:	05 d0       	rcall	.+10     	; 0x1768 <__divmodhi4_neg2>
    175e:	3e f4       	brtc	.+14     	; 0x176e <__divmodhi4_exit>

00001760 <__divmodhi4_neg1>:
    1760:	90 95       	com	r25
    1762:	81 95       	neg	r24
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <__divmodhi4_neg2>:
    1768:	70 95       	com	r23
    176a:	61 95       	neg	r22
    176c:	7f 4f       	sbci	r23, 0xFF	; 255

0000176e <__divmodhi4_exit>:
    176e:	08 95       	ret

00001770 <__umulhisi3>:
    1770:	a2 9f       	mul	r26, r18
    1772:	b0 01       	movw	r22, r0
    1774:	b3 9f       	mul	r27, r19
    1776:	c0 01       	movw	r24, r0
    1778:	a3 9f       	mul	r26, r19
    177a:	70 0d       	add	r23, r0
    177c:	81 1d       	adc	r24, r1
    177e:	11 24       	eor	r1, r1
    1780:	91 1d       	adc	r25, r1
    1782:	b2 9f       	mul	r27, r18
    1784:	70 0d       	add	r23, r0
    1786:	81 1d       	adc	r24, r1
    1788:	11 24       	eor	r1, r1
    178a:	91 1d       	adc	r25, r1
    178c:	08 95       	ret

0000178e <do_rand>:
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	68 81       	ld	r22, Y
    17a6:	79 81       	ldd	r23, Y+1	; 0x01
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	61 15       	cp	r22, r1
    17ae:	71 05       	cpc	r23, r1
    17b0:	81 05       	cpc	r24, r1
    17b2:	91 05       	cpc	r25, r1
    17b4:	21 f4       	brne	.+8      	; 0x17be <do_rand+0x30>
    17b6:	64 e2       	ldi	r22, 0x24	; 36
    17b8:	79 ed       	ldi	r23, 0xD9	; 217
    17ba:	8b e5       	ldi	r24, 0x5B	; 91
    17bc:	97 e0       	ldi	r25, 0x07	; 7
    17be:	2d e1       	ldi	r18, 0x1D	; 29
    17c0:	33 ef       	ldi	r19, 0xF3	; 243
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	38 d0       	rcall	.+112    	; 0x1838 <__divmodsi4>
    17c8:	49 01       	movw	r8, r18
    17ca:	5a 01       	movw	r10, r20
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	a7 ea       	ldi	r26, 0xA7	; 167
    17d2:	b1 e4       	ldi	r27, 0x41	; 65
    17d4:	4d d0       	rcall	.+154    	; 0x1870 <__muluhisi3>
    17d6:	6b 01       	movw	r12, r22
    17d8:	7c 01       	movw	r14, r24
    17da:	ac ee       	ldi	r26, 0xEC	; 236
    17dc:	b4 ef       	ldi	r27, 0xF4	; 244
    17de:	a5 01       	movw	r20, r10
    17e0:	94 01       	movw	r18, r8
    17e2:	52 d0       	rcall	.+164    	; 0x1888 <__mulohisi3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8c 0d       	add	r24, r12
    17ea:	9d 1d       	adc	r25, r13
    17ec:	ae 1d       	adc	r26, r14
    17ee:	bf 1d       	adc	r27, r15
    17f0:	b7 ff       	sbrs	r27, 7
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <do_rand+0x6c>
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	a1 09       	sbc	r26, r1
    17f8:	b0 48       	sbci	r27, 0x80	; 128
    17fa:	88 83       	st	Y, r24
    17fc:	99 83       	std	Y+1, r25	; 0x01
    17fe:	aa 83       	std	Y+2, r26	; 0x02
    1800:	bb 83       	std	Y+3, r27	; 0x03
    1802:	9f 77       	andi	r25, 0x7F	; 127
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	bf 90       	pop	r11
    1812:	af 90       	pop	r10
    1814:	9f 90       	pop	r9
    1816:	8f 90       	pop	r8
    1818:	08 95       	ret

0000181a <rand_r>:
    181a:	b9 cf       	rjmp	.-142    	; 0x178e <do_rand>

0000181c <rand>:
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	b6 cf       	rjmp	.-148    	; 0x178e <do_rand>

00001822 <srand>:
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    182a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    182e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1832:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1836:	08 95       	ret

00001838 <__divmodsi4>:
    1838:	05 2e       	mov	r0, r21
    183a:	97 fb       	bst	r25, 7
    183c:	16 f4       	brtc	.+4      	; 0x1842 <__divmodsi4+0xa>
    183e:	00 94       	com	r0
    1840:	0f d0       	rcall	.+30     	; 0x1860 <__negsi2>
    1842:	57 fd       	sbrc	r21, 7
    1844:	05 d0       	rcall	.+10     	; 0x1850 <__divmodsi4_neg2>
    1846:	24 d0       	rcall	.+72     	; 0x1890 <__udivmodsi4>
    1848:	07 fc       	sbrc	r0, 7
    184a:	02 d0       	rcall	.+4      	; 0x1850 <__divmodsi4_neg2>
    184c:	46 f4       	brtc	.+16     	; 0x185e <__divmodsi4_exit>
    184e:	08 c0       	rjmp	.+16     	; 0x1860 <__negsi2>

00001850 <__divmodsi4_neg2>:
    1850:	50 95       	com	r21
    1852:	40 95       	com	r20
    1854:	30 95       	com	r19
    1856:	21 95       	neg	r18
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	4f 4f       	sbci	r20, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255

0000185e <__divmodsi4_exit>:
    185e:	08 95       	ret

00001860 <__negsi2>:
    1860:	90 95       	com	r25
    1862:	80 95       	com	r24
    1864:	70 95       	com	r23
    1866:	61 95       	neg	r22
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	8f 4f       	sbci	r24, 0xFF	; 255
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	08 95       	ret

00001870 <__muluhisi3>:
    1870:	7f df       	rcall	.-258    	; 0x1770 <__umulhisi3>
    1872:	a5 9f       	mul	r26, r21
    1874:	90 0d       	add	r25, r0
    1876:	b4 9f       	mul	r27, r20
    1878:	90 0d       	add	r25, r0
    187a:	a4 9f       	mul	r26, r20
    187c:	80 0d       	add	r24, r0
    187e:	91 1d       	adc	r25, r1
    1880:	11 24       	eor	r1, r1
    1882:	08 95       	ret

00001884 <__mulshisi3>:
    1884:	b7 ff       	sbrs	r27, 7
    1886:	f4 cf       	rjmp	.-24     	; 0x1870 <__muluhisi3>

00001888 <__mulohisi3>:
    1888:	f3 df       	rcall	.-26     	; 0x1870 <__muluhisi3>
    188a:	82 1b       	sub	r24, r18
    188c:	93 0b       	sbc	r25, r19
    188e:	08 95       	ret

00001890 <__udivmodsi4>:
    1890:	a1 e2       	ldi	r26, 0x21	; 33
    1892:	1a 2e       	mov	r1, r26
    1894:	aa 1b       	sub	r26, r26
    1896:	bb 1b       	sub	r27, r27
    1898:	fd 01       	movw	r30, r26
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <__udivmodsi4_ep>

0000189c <__udivmodsi4_loop>:
    189c:	aa 1f       	adc	r26, r26
    189e:	bb 1f       	adc	r27, r27
    18a0:	ee 1f       	adc	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	a2 17       	cp	r26, r18
    18a6:	b3 07       	cpc	r27, r19
    18a8:	e4 07       	cpc	r30, r20
    18aa:	f5 07       	cpc	r31, r21
    18ac:	20 f0       	brcs	.+8      	; 0x18b6 <__udivmodsi4_ep>
    18ae:	a2 1b       	sub	r26, r18
    18b0:	b3 0b       	sbc	r27, r19
    18b2:	e4 0b       	sbc	r30, r20
    18b4:	f5 0b       	sbc	r31, r21

000018b6 <__udivmodsi4_ep>:
    18b6:	66 1f       	adc	r22, r22
    18b8:	77 1f       	adc	r23, r23
    18ba:	88 1f       	adc	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	1a 94       	dec	r1
    18c0:	69 f7       	brne	.-38     	; 0x189c <__udivmodsi4_loop>
    18c2:	60 95       	com	r22
    18c4:	70 95       	com	r23
    18c6:	80 95       	com	r24
    18c8:	90 95       	com	r25
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	bd 01       	movw	r22, r26
    18d0:	cf 01       	movw	r24, r30
    18d2:	08 95       	ret

000018d4 <_exit>:
    18d4:	f8 94       	cli

000018d6 <__stop_program>:
    18d6:	ff cf       	rjmp	.-2      	; 0x18d6 <__stop_program>
